{"version":3,"sources":["components/appNavbar.jsx","components/infoModal.jsx","components/rangeInput.jsx","models/session.js","services/settingsService.js","components/checkbox.jsx","components/settingsModal.jsx","components/leftToBottomCol.jsx","components/rightToTopCol.jsx","components/sessionButtons.jsx","components/summary.jsx","components/taskInput.jsx","components/taskButtons.jsx","types/index.js","components/taskComponent.jsx","components/taskList.jsx","services/taskService.js","models/task.js","components/tasks.jsx","models/time.js","components/sound.jsx","models/title.js","components/timer.jsx","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","handleToggle","_this","setState","this","_this$props","props","title","isBreakTime","isWorking","onInfoClick","onSettingsClick","classes","concat","react_default","a","createElement","reactstrap_es","dark","expand","className","href","onClick","navbar","id","Component","InfoModal","_ref","onToggle","toggle","target","rel","RangeInput","value","handleChange","input","currentTarget","name","min","max","onChange","Number","default","_this$props2","label","for","type","defaultProps","Session","OVERTIME","POMODORO","SHORT_BREAK","LONG_BREAK","TIMER_MIN","TIMER_MAX","getOvertime","setOvertime","validTimers","timers","Object","keys","some","k","setTimers","pomodoro","shortBreak","longBreak","getTimers","getBreakduration","pomodori","getTextFromTime","time","timersKeys","overtimeKey","settingsService","values","map","localStorage","getItem","saveTimers","setItem","toString","Checkbox","checked","check","SettingsModal","overtime","handleTimerChange","objectSpread","handleOvertimeChange","prevProps","prevState","save","_this$state","_this$state2","rangeInput","components_checkbox","color","LeftToBottomCol","children","lg","size","order","xs","RightToTopCol","SessionButtons","isActive","sess","currentSession","getButtonClasses","onButtonClick","src","alt","Summary","taskCount","pomodoroCount","showOvertime","Fragment","breaks","TaskInput","text","handleKeyDown","_ref2","key","handleSubmit","trim","onSubmit","_this2","placeholder","onKeyDown","onBlur","autoFocus","TaskButtons","shape","_id","string","isRequired","number","task","onDelete","onEditClick","outline","newName","isEditing","renderSubmitEditButton","renderActionButtons","TaskComponent","handleEditClick","handleEditSubmit","onEdit","getBadgeColor","onSetActive","taskClasses","taskInput","md","pill","taskButtons","TaskList","taskId","currentTask","tasks","onSetActiveTask","flush","length","taskComponent","taskService","getAll","JSON","parse","stringify","Task","classCallCheck","addPomodoro","getDefaultTask","Tasks","handleSetActiveTask","handleNewTask","arguments","undefined","DEBUG_se_hack","toConsumableArray","Math","random","push","handleDeleteTask","oldTasks","newTask","updates","splice","indexOf","handleEditTask","index","findIndex","t","initTasks","onTasksChanged","pendingPomodoro","addPomodoroToCurrentTask","reduce","curr","getTotalPomodori","_this$state3","onPomodoroAssigned","_this$state4","taskList","Time","sec","s","floor","m","seconds","mins","secs","Sound","possibleConstructorReturn","getPrototypeOf","call","audioRef","React","createRef","current","volume","play","ref","Title","session","isPaused","update","document","setSession","setTime","Timer","running","timer","playSound","handleSecondPassed","onOvertime","nextTime","timerFinished","handleTimerToggle","_callee","regenerator_default","wrap","_context","prev","next","onOvertimeDone","totalSeconds","stopTimer","startTimer","stop","onNewSession","currentSessionValue","startOnChange","onTimerDone","onTimerStop","clearInterval","onTimerStart","setInterval","setTimeout","isPomodoro","sound_Sound","App","infoModalOpen","settingsModalOpen","initCompleted","handleSessionEnd","onPomodoroFinished","handleSetSession","handleTimerStart","handleTimerStop","handleTaskCountChange","handlePomodoroAssigned","handleInfoModalToggle","handleSettingsModalToggle","handleOvertime","mapOvertimeToString","secToMinSecString","initSettings","initTimers","initOtherSettings","initTitle","isSessionPomodoro","appNavbar","infoModal","settingsModal","leftToBottomCol","components_tasks","rightToTopCol","sessionButtons","components_timer","summary","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f2bf625.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  handleToggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { isOpen } = this.state;\r\n    const {\r\n      title,\r\n      isBreakTime,\r\n      isWorking,\r\n      onInfoClick,\r\n      onSettingsClick\r\n    } = this.props;\r\n\r\n    const classes = `${isBreakTime ? 'break-vibe' : ''} ${\r\n      isWorking ? 'animate' : ''\r\n    }`;\r\n\r\n    return (\r\n      <div>\r\n        <Navbar dark expand=\"md\" className={classes}>\r\n          <NavbarBrand href=\"/\">{title}</NavbarBrand>\r\n          <NavbarToggler onClick={this.handleToggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink\r\n                  id=\"info-nav-link\"\r\n                  className=\"clickable\"\r\n                  onClick={onInfoClick}\r\n                >\r\n                  Info\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  id=\"settings-nav-link\"\r\n                  className=\"clickable\"\r\n                  onClick={onSettingsClick}\r\n                >\r\n                  Settings\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// TODO: make prop names clearer\r\nAppNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  isBreakTime: PropTypes.bool.isRequired,\r\n  isWorking: PropTypes.bool.isRequired,\r\n  onInfoClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\n\r\nconst InfoModal = ({ isOpen, onToggle }) => {\r\n  return (\r\n    <Modal isOpen={isOpen} toggle={onToggle} className=\"info-modal\">\r\n      <ModalHeader toggle={onToggle}>Info</ModalHeader>\r\n      <ModalBody>\r\n        <h5>Pomodoro, pomodori?</h5>\r\n        <p>It is the Italian word for tomato, and the plural is pomodori.</p>\r\n\r\n        <h5>What is this website?</h5>\r\n        <p>\r\n          It is a timer web application I developed to implement the Pomodoro\r\n          Technique.\r\n        </p>\r\n\r\n        <h5>The Pomodoro Technique</h5>\r\n        <p>\r\n          It is a time-management and productivity booster technique created by\r\n          Francesco Cirillo.\r\n          <br />\r\n          It can help size up tasks and maintain focus throughout your work by\r\n          diving it into time chunks.\r\n          <br />\r\n          You can read more about it{' '}\r\n          <a\r\n            href=\"https://francescocirillo.com/pages/pomodoro-technique\"\r\n            className=\"link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            here\r\n          </a>\r\n          .\r\n        </p>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nInfoModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default InfoModal;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Input, FormGroup, Label } from 'reactstrap';\r\n\r\nclass RangeInput extends Component {\r\n  state = {\r\n    value: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ value: this.props.default });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const { name, min, max, onChange } = this.props;\r\n\r\n    if (input.value < min || input.value > max) return;\r\n\r\n    onChange(name, Number(input.value));\r\n    this.setState({ value: input.value });\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const { name, label, min, max } = this.props;\r\n\r\n    return (\r\n      <FormGroup>\r\n        <Row>\r\n          <Col>\r\n            <Label for={name}>{label}</Label>\r\n          </Col>\r\n          <Col>\r\n            <Input\r\n              type=\"number\"\r\n              min={min}\r\n              max={max}\r\n              name={name}\r\n              value={value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nRangeInput.propTypes = {\r\n  name: PropTypes.string,\r\n  value: PropTypes.number,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nRangeInput.defaultProps = {\r\n  name: '',\r\n  value: 0,\r\n  onChange: () => null\r\n};\r\n\r\nexport default RangeInput;\r\n","export default class Session {\r\n  static OVERTIME = false;\r\n  static POMODORO = 25;\r\n  static SHORT_BREAK = 5;\r\n  static LONG_BREAK = 10;\r\n  static TIMER_MIN = 1;\r\n  static TIMER_MAX = 120;\r\n\r\n  static getOvertime = () => Session.OVERTIME;\r\n\r\n  static setOvertime = (value) => Session.OVERTIME = value;\r\n\r\n  static validTimers = timers =>\r\n    !Object.keys(timers).some(\r\n      k => timers[k] < Session.TIMER_MIN || timers[k] > Session.TIMER_MAX\r\n    );\r\n\r\n  static setTimers = timers => {\r\n    if (timers.pomodoro !== 0) Session.POMODORO = timers.pomodoro;\r\n    if (timers.shortBreak !== 0) Session.SHORT_BREAK = timers.shortBreak;\r\n    if (timers.longBreak !== 0) Session.LONG_BREAK = timers.longBreak;\r\n  };\r\n\r\n  static getTimers = () => {\r\n    return {\r\n      pomodoro: Session.POMODORO,\r\n      shortBreak: Session.SHORT_BREAK,\r\n      longBreak: Session.LONG_BREAK\r\n    };\r\n  };\r\n\r\n  static getBreakduration = pomodori =>\r\n    pomodori > 0 && pomodori % 4 === 0\r\n      ? Session.LONG_BREAK\r\n      : Session.SHORT_BREAK;\r\n\r\n  static getTextFromTime = time => {\r\n    switch (time) {\r\n      case Session.SHORT_BREAK:\r\n        return 'Break (S)';\r\n\r\n      case Session.LONG_BREAK:\r\n        return 'Break (L)';\r\n\r\n      default:\r\n        return 'Pomodoro';\r\n    }\r\n  };\r\n}\r\n","const timersKeys = {\r\n  pomodoro: 'pomodoro',\r\n  shortBreak: 'sb',\r\n  longBreak: 'lb'\r\n};\r\nconst overtimeKey = 'overtime';\r\n\r\nfunction getTimers() {\r\n  const values = Object.keys(timersKeys).map(k =>\r\n    Number(localStorage.getItem(timersKeys[k]))\r\n  );\r\n  return {\r\n    pomodoro: values[0],\r\n    shortBreak: values[1],\r\n    longBreak: values[2]\r\n  };\r\n}\r\n\r\nfunction saveTimers(timers) {\r\n  localStorage.setItem(timersKeys.pomodoro, timers.pomodoro);\r\n  localStorage.setItem(timersKeys.shortBreak, timers.shortBreak);\r\n  localStorage.setItem(timersKeys.longBreak, timers.longBreak);\r\n}\r\n\r\nfunction getOvertime() {\r\n  const value = localStorage.getItem(overtimeKey);\r\n  if (value === null) return false;\r\n  return value.toString() === \"true\";\r\n}\r\n\r\nfunction setOvertime(value) {\r\n  if (value === null) value = false;\r\n  localStorage.setItem(overtimeKey, value.toString() === \"true\");\r\n}\r\n\r\nexport default {\r\n  getTimers,\r\n  saveTimers,\r\n  getOvertime,\r\n  setOvertime\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Row, Input, FormGroup, Label } from 'reactstrap';\r\n\r\nclass Checkbox extends Component {\r\n  state = {\r\n    value: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ value: this.props.default });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const value = input.checked;\r\n    this.props.onChange(value);\r\n    this.setState({ value });\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const { label } = this.props;\r\n\r\n    return (\r\n      <FormGroup check>\r\n        <Row>\r\n          <Col>\r\n            <Label check>\r\n              <Input type=\"checkbox\" checked={value} onChange={this.handleChange} />{' '}\r\n              {label}\r\n            </Label>\r\n          </Col>\r\n        </Row>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nCheckbox.propTypes = {\r\n  default: PropTypes.bool,\r\n  label: PropTypes.string\r\n};\r\n\r\nCheckbox.defaultProps = {\r\n  default: false,\r\n  onChange: () => null\r\n};\r\n\r\nexport default Checkbox;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody, Button } from 'reactstrap';\r\nimport RangeInput from './rangeInput';\r\nimport Session from './../models/session';\r\nimport settingsService from '../services/settingsService';\r\nimport Checkbox from './checkbox';\r\n\r\nclass SettingsModal extends Component {\r\n  state = {\r\n    timers: {\r\n      pomodoro: 0,\r\n      shortBreak: 0,\r\n      longBreak: 0\r\n    },\r\n    overtime: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      timers: Session.getTimers(),\r\n      overtime: Session.getOvertime()\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.isOpen && !this.props.isOpen) this.save();\r\n  }\r\n\r\n  handleTimerChange = (name, value) => {\r\n    const timers = { ...this.state.timers };\r\n    timers[name] = value;\r\n    this.setState({ timers });\r\n  };\r\n\r\n  handleOvertimeChange = value => {\r\n    this.setState({ overtime: value });\r\n  };\r\n\r\n  save() {\r\n    const { timers, overtime } = this.state;\r\n\r\n    if (!Session.validTimers(timers)) return;\r\n\r\n    Session.setTimers(timers);\r\n    settingsService.saveTimers(timers);\r\n    Session.setOvertime(overtime);\r\n    settingsService.setOvertime(overtime);\r\n  }\r\n\r\n  render() {\r\n    const { timers, overtime } = this.state;\r\n    const { isOpen, onToggle } = this.props;\r\n\r\n    return (\r\n      <Modal isOpen={isOpen} toggle={onToggle} className=\"settings-modal\">\r\n        <ModalHeader toggle={onToggle}>Settings</ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"mb-3\">\r\n            <strong>Timer Durations</strong>\r\n          </div>\r\n          <RangeInput\r\n            name=\"pomodoro\"\r\n            label=\"Pomodoro\"\r\n            min={Session.TIMER_MIN}\r\n            max={Session.TIMER_MAX}\r\n            default={timers.pomodoro}\r\n            onChange={this.handleTimerChange}\r\n          />\r\n          <RangeInput\r\n            name=\"shortBreak\"\r\n            label=\"Short Break\"\r\n            min={Session.TIMER_MIN}\r\n            max={Session.TIMER_MAX}\r\n            default={timers.shortBreak}\r\n            onChange={this.handleTimerChange}\r\n          />\r\n          <RangeInput\r\n            name=\"longBreak\"\r\n            label=\"Long Break\"\r\n            min={Session.TIMER_MIN}\r\n            max={Session.TIMER_MAX}\r\n            default={timers.longBreak}\r\n            onChange={this.handleTimerChange}\r\n          />\r\n          <Checkbox\r\n            label=\"Overtime\"\r\n            default={overtime}\r\n            onChange={this.handleOvertimeChange}\r\n          />\r\n          <div className=\"settings-submit-button-container\">\r\n            <Button\r\n              id=\"settings-submit-button\"\r\n              className=\"action-button\"\r\n              color=\"danger\"\r\n              onClick={onToggle}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </ModalBody>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nSettingsModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SettingsModal;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst LeftToBottomCol = ({ children }) => (\r\n  <Col\r\n    lg={{ size: 8, order: 1 }}\r\n    xs={{ size: 12, order: 2 }}\r\n    className=\"left-to-bottom-column\"\r\n  >\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default LeftToBottomCol;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst RightToTopCol = ({ children }) => (\r\n  <Col lg={{ size: 4, order: 2 }} xs={{ size: 12, order: 1 }}>\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default RightToTopCol;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport Session from '../models/session';\r\n\r\nclass SessionButtons extends Component {\r\n  isActive = sess => this.props.currentSession === sess;\r\n\r\n  getButtonClasses = sess => {\r\n    const pomodoro = sess === Session.POMODORO;\r\n\r\n    let classes = pomodoro ? 'pomodoro-button' : 'break-button';\r\n    if (this.isActive(sess)) classes += pomodoro ? ' working' : ' break';\r\n\r\n    return classes;\r\n  };\r\n\r\n  render() {\r\n    const { onButtonClick } = this.props;\r\n\r\n    return (\r\n      <div className=\"session-buttons\">\r\n        <Button\r\n          id=\"pomodoro-session-button\"\r\n          className={this.getButtonClasses(Session.POMODORO)}\r\n          onClick={() => onButtonClick(Session.POMODORO)}\r\n        >\r\n          <img\r\n            src=\"./img/pomodoro.png\"\r\n            alt=\"pomodoro\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n        <Button\r\n          id=\"short-break-session-button\"\r\n          className={this.getButtonClasses(Session.SHORT_BREAK)}\r\n          onClick={() => onButtonClick(Session.SHORT_BREAK)}\r\n        >\r\n          <img\r\n            src=\"./img/time-5.png\"\r\n            alt=\"Short break\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n        <Button\r\n          id=\"long-break-session-button\"\r\n          className={this.getButtonClasses(Session.LONG_BREAK)}\r\n          onClick={() => onButtonClick(Session.LONG_BREAK)}\r\n        >\r\n          <img\r\n            src=\"./img/time-10.png\"\r\n            alt=\"Long break\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSessionButtons.propTypes = {\r\n  onButtonClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SessionButtons;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nconst Summary = ({ taskCount, pomodoroCount, overtime, showOvertime }) => {\r\n  return (\r\n    <Row className=\"summary\">\r\n      <Col className=\"text-center\">\r\n        <p className=\"text-bold\">Tasks</p>\r\n        <p id=\"summary-task-count\">{taskCount}</p>\r\n      </Col>\r\n      <Col className=\"text-center\">\r\n        <p className=\"text-bold\">Pomodori</p>\r\n        <p id=\"summary-pomodoro-count\">{pomodoroCount}</p>\r\n      </Col>\r\n      {showOvertime && (\r\n        <React.Fragment>\r\n          <Col className=\"text-center\">\r\n            <p className=\"text-bold\">Overtime (P)</p>\r\n            <p id=\"summary-overtime-pomodoro\">{overtime.pomodori}</p>\r\n          </Col>\r\n          <Col className=\"text-center\">\r\n            <p className=\"text-bold\">Overtime (B)</p>\r\n            <p id=\"summary-overtime-breaks\">{overtime.breaks}</p>\r\n          </Col>\r\n        </React.Fragment>\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nSummary.propTypes = {\r\n  taskCount: PropTypes.number.isRequired,\r\n  pomodoroCount: PropTypes.number.isRequired,\r\n  overtime: PropTypes.object.isRequired,\r\n  showOvertime: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Summary;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, FormGroup } from 'reactstrap';\r\n\r\nclass TaskInput extends Component {\r\n  state = {\r\n    text: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ text: this.props.text });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    this.props.onChange(input.value);\r\n    this.setState({ text: input.value });\r\n  };\r\n\r\n  handleKeyDown = ({ key }) => {\r\n    const { text } = this.state;\r\n    if (key !== 'Enter') return;\r\n\r\n    this.handleSubmit(text);\r\n  };\r\n\r\n  handleSubmit = text => {\r\n    if (!text.trim()) return;\r\n\r\n    const { onSubmit } = this.props;\r\n\r\n    onSubmit(text);\r\n    this.setState({ text: '' });\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    const { placeholder } = this.props;\r\n\r\n    return (\r\n      <FormGroup>\r\n        <Input\r\n          name=\"task-input\"\r\n          placeholder={placeholder}\r\n          value={text}\r\n          onChange={this.handleChange}\r\n          onKeyDown={this.handleKeyDown}\r\n          onBlur={() => this.handleSubmit(text)}\r\n          autoFocus\r\n        />\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskInput.propTypes = {\r\n  text: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nTaskInput.defaultProps = {\r\n  text: '',\r\n  placeholder: '',\r\n  onChange: () => null\r\n};\r\n\r\nexport default TaskInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport { taskType } from './../types/index';\r\n\r\nclass TaskButtons extends Component {\r\n  renderActionButtons() {\r\n    const { task, onDelete, onEditClick } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          id=\"task-edit-button\"\r\n          className=\"action-button\"\r\n          size=\"sm\"\r\n          color=\"primary\"\r\n          outline\r\n          onClick={onEditClick}\r\n        >\r\n          <img src=\"./img/edit.svg\" alt=\"Edit\" />\r\n        </Button>\r\n        <Button\r\n          id=\"task-delete-button\"\r\n          className=\"action-button\"\r\n          size=\"sm\"\r\n          color=\"primary\"\r\n          outline\r\n          onClick={() => onDelete(task)}\r\n        >\r\n          <img src=\"./img/delete.svg\" alt=\"Delete\" />\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  renderSubmitEditButton() {\r\n    const { newName, onSubmit } = this.props;\r\n\r\n    return (\r\n      <Button\r\n        id=\"task-submit-edit-button\"\r\n        className=\"action-button\"\r\n        size=\"sm\"\r\n        color=\"primary\"\r\n        outline\r\n        onClick={() => onSubmit(newName)}\r\n      >\r\n        <img src=\"./img/check-mark.svg\" alt=\"Edit\" />\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isEditing } = this.props;\r\n    return isEditing\r\n      ? this.renderSubmitEditButton()\r\n      : this.renderActionButtons();\r\n  }\r\n}\r\n\r\nTaskButtons.propTypes = {\r\n  task: taskType,\r\n  newName: PropTypes.string.isRequired,\r\n  isEditing: PropTypes.bool.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEditClick: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskButtons;\r\n","import { shape, string, number } from 'prop-types';\r\n\r\nexport const taskType = shape({\r\n  _id: string.isRequired,\r\n  name: string.isRequired,\r\n  pomodori: number.isRequired\r\n});\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, ListGroupItem, Badge } from 'reactstrap';\r\nimport TaskInput from './taskInput';\r\nimport TaskButtons from './taskButtons';\r\nimport { taskType } from '../types/index';\r\n\r\nclass TaskComponent extends Component {\r\n  state = {\r\n    isEditing: false,\r\n    newName: ''\r\n  };\r\n\r\n  handleEditClick = () => {\r\n    const { isEditing } = this.state;\r\n    this.setState({ isEditing: !isEditing });\r\n  };\r\n\r\n  handleEditSubmit = name => {\r\n    const { task, onEdit } = this.props;\r\n    onEdit(task._id, name);\r\n    this.setState({ isEditing: false });\r\n  };\r\n\r\n  handleChange = newName => {\r\n    this.setState({ newName });\r\n  };\r\n\r\n  getBadgeColor = () =>\r\n    this.props.task.pomodori === 0 ? 'secondary' : 'primary';\r\n\r\n  render() {\r\n    const { isEditing, newName } = this.state;\r\n    const { task, isActive, onSetActive, onDelete } = this.props;\r\n\r\n    const taskClasses = 'task' + (isActive ? ' active' : '');\r\n\r\n    return (\r\n      <ListGroupItem className={taskClasses}>\r\n        <Row>\r\n          <Col\r\n            className=\"w-100 clickable task-name\"\r\n            onClick={() => onSetActive(task)}\r\n          >\r\n            {isEditing ? (\r\n              <TaskInput\r\n                text={task.name}\r\n                onChange={this.handleChange}\r\n                onSubmit={this.handleEditSubmit}\r\n              />\r\n            ) : (\r\n              task.name\r\n            )}\r\n          </Col>\r\n          <Col md=\"2\" xs=\"1\">\r\n            <Badge color={this.getBadgeColor()} pill>\r\n              {task.pomodori}\r\n            </Badge>\r\n          </Col>\r\n          <Col md=\"3\" xs=\"3\" className=\"text-right action-buttons\">\r\n            <TaskButtons\r\n              task={task}\r\n              newName={newName}\r\n              isEditing={isEditing}\r\n              onSubmit={this.handleEditSubmit}\r\n              onEditClick={this.handleEditClick}\r\n              onDelete={onDelete}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </ListGroupItem>\r\n    );\r\n  }\r\n}\r\n\r\nTaskComponent.propTypes = {\r\n  task: taskType.isRequired,\r\n  isActive: PropTypes.bool,\r\n  onSetActive: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskComponent;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ListGroup } from 'reactstrap';\r\nimport TaskComponent from './taskComponent';\r\nimport { taskType } from '../types';\r\n\r\nclass TaskList extends Component {\r\n  isActive(taskId) {\r\n    const { currentTask } = this.props;\r\n    return currentTask && currentTask._id === taskId;\r\n  }\r\n\r\n  render() {\r\n    const { tasks, onSetActiveTask, onDelete, onEdit } = this.props;\r\n\r\n    return (\r\n      <ListGroup flush>\r\n        {tasks.length === 0 && <p>Add a task and start working!</p>}\r\n        {tasks &&\r\n          tasks.map(task => (\r\n            <TaskComponent\r\n              key={task._id}\r\n              task={task}\r\n              isActive={this.isActive(task._id)}\r\n              onSetActive={onSetActiveTask}\r\n              onDelete={onDelete}\r\n              onEdit={onEdit}\r\n            />\r\n          ))}\r\n      </ListGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.arrayOf(taskType),\r\n  currentTask: taskType,\r\n  onSetActiveTask: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskList;\r\n","const key = 'tasks';\r\n\r\nfunction getAll() {\r\n  return JSON.parse(localStorage.getItem(key));\r\n}\r\n\r\nfunction save(tasks) {\r\n  return localStorage.setItem(key, JSON.stringify(tasks));\r\n}\r\n\r\nexport default { getAll, save };\r\n","export default class Task {\r\n  constructor(id, name, pomodori) {\r\n    this._id = id;\r\n    this.name = name;\r\n    this.pomodori = pomodori;\r\n  }\r\n\r\n  addPomodoro = () => this.pomodori++;\r\n\r\n  static getDefaultTask = () => new Task('1', 'Untitled task', 0);\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskInput from './taskInput';\r\nimport TaskList from './taskList';\r\nimport taskService from '../services/taskService';\r\nimport Task from '../models/task';\r\n\r\nclass Tasks extends Component {\r\n  state = {\r\n    tasks: [],\r\n    currentTask: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initTasks();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.tasks !== this.state.tasks) this.onTasksChanged();\r\n\r\n    if (!prevProps.pendingPomodoro && this.props.pendingPomodoro)\r\n      this.addPomodoroToCurrentTask();\r\n  }\r\n\r\n  initTasks() {\r\n    let tasks = taskService.getAll();\r\n    if (!tasks || tasks.length === 0) tasks = [Task.getDefaultTask()];\r\n\r\n    this.setState({ tasks, currentTask: tasks[0] });\r\n  }\r\n\r\n  getTotalPomodori() {\r\n    const { tasks } = this.state;\r\n    return tasks.length === 0\r\n      ? 0\r\n      : tasks.reduce((t, curr) => t + curr.pomodori, 0);\r\n  }\r\n\r\n  onTasksChanged() {\r\n    const { tasks } = this.state;\r\n    const { onTasksChanged } = this.props;\r\n\r\n    onTasksChanged(tasks.length, this.getTotalPomodori());\r\n    taskService.save(tasks);\r\n  }\r\n\r\n  addPomodoroToCurrentTask() {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n    const { onPomodoroAssigned } = this.props;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.indexOf(currentTask);\r\n    const task = new Task(\r\n      tasks[index]._id,\r\n      tasks[index].name,\r\n      tasks[index].pomodori + 1\r\n    );\r\n    tasks[index] = task;\r\n\r\n    this.setState({\r\n      tasks,\r\n      currentTask: task\r\n    });\r\n    onPomodoroAssigned();\r\n  }\r\n\r\n  handleSetActiveTask = task => {\r\n    this.setState({ currentTask: task });\r\n  };\r\n\r\n  handleNewTask = (name, pomodori = 0) => {\r\n    if (name === '>>es') return this.props.DEBUG_se_hack();\r\n\r\n    const tasks = [...this.state.tasks];\r\n    const task = new Task(\r\n      `${name.length}${Math.random() * 1000000}`,\r\n      name.trim(),\r\n      pomodori\r\n    );\r\n    tasks.push(task);\r\n\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  handleDeleteTask = task => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    if (oldTasks.length <= 1) {\r\n      const newTask = Task.getDefaultTask();\r\n      return this.setState({ tasks: [newTask], currentTask: newTask });\r\n    }\r\n\r\n    let tasks = [...oldTasks];\r\n    const updates = {};\r\n\r\n    tasks.splice(tasks.indexOf(task), 1);\r\n\r\n    updates.tasks = tasks;\r\n    if (!currentTask || task._id === currentTask._id || tasks.length === 1)\r\n      updates.currentTask = tasks[0];\r\n\r\n    this.setState(updates);\r\n  };\r\n\r\n  handleEditTask = (id, name) => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.findIndex(t => t._id === id);\r\n    const task = new Task(tasks[index]._id, name.trim(), tasks[index].pomodori);\r\n    tasks[index] = task;\r\n\r\n    const updates = { tasks };\r\n    if (task._id === currentTask._id) updates.currentTask = task;\r\n    this.setState(updates);\r\n  };\r\n\r\n  render() {\r\n    const { tasks, currentTask } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <TaskInput\r\n          placeholder=\"Enter task here...\"\r\n          onSubmit={this.handleNewTask}\r\n        />\r\n        <TaskList\r\n          tasks={tasks}\r\n          currentTask={currentTask}\r\n          onSetActiveTask={this.handleSetActiveTask}\r\n          onEdit={this.handleEditTask}\r\n          onDelete={this.handleDeleteTask}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTasks.propTypes = {\r\n  pendingPomodoro: PropTypes.bool.isRequired,\r\n  onTasksChanged: PropTypes.func.isRequired,\r\n  onPomodoroAssigned: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Tasks;\r\n","class Time {\r\n  constructor(min, sec) {\r\n    this.min = min;\r\n    this.sec = sec;\r\n  }\r\n\r\n  get totalSeconds() {\r\n    return this.min * 60 + this.sec;\r\n  }\r\n\r\n  incSeconds(s) {\r\n    this.sec += s;\r\n    if (this.sec >= 60) {\r\n      this.min += Math.floor(this.sec / 60);\r\n      this.sec = this.sec % 60;\r\n    }\r\n  }\r\n\r\n  static secToMinSecString(seconds) {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n\r\n    const m = mins < 10 ? `0${mins}` : mins;\r\n    const s = secs < 10 ? `0${secs}` : secs;\r\n    return `${m}:${s}`;\r\n  }\r\n\r\n  toString() {\r\n    const m = this.min < 10 ? `0${this.min}` : this.min;\r\n    const s = this.sec < 10 ? `0${this.sec}` : this.sec;\r\n    return `${m} : ${s}`;\r\n  }\r\n}\r\n\r\nexport default Time;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Sound extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.audioRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.audioRef.current.volume = 0.2;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!prevProps.play && this.props.play)\r\n      this.audioRef.current.play();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <audio src=\"./sound/alert.mp3\" ref={this.audioRef}>\r\n        It looks like your browser doesn't support audio playback through html...\r\n      </audio>\r\n    );\r\n  }\r\n}\r\n","export default class Title {\r\n  static value = '';\r\n\r\n  static session = '';\r\n  static time = '';\r\n  static isPaused = false;\r\n\r\n  static update = () =>\r\n    (document.title =\r\n      `${Title.session} - ${Title.time}` + (Title.isPaused ? ` - PAUSED` : ''));\r\n\r\n  static setSession = session => {\r\n    Title.session = session;\r\n    Title.update();\r\n  };\r\n\r\n  static setTime = time => {\r\n    Title.time = time;\r\n    Title.update();\r\n  };\r\n\r\n  static setState = state => {\r\n    Title.isPaused = state;\r\n    Title.update();\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Time from '../models/time';\r\nimport Sound from './sound';\r\nimport Title from './../models/title';\r\nimport Session from '../models/session';\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    running: false,\r\n    time: new Time(0, 0),\r\n    timer: null,\r\n    playSound: false,\r\n    overtime: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setTime(this.props.currentSessionValue, 0);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.currentSessionValue !== this.props.currentSessionValue)\r\n      this.onNewSession();\r\n  }\r\n\r\n  setTime = (min, sec) =>\r\n    this.setState({ time: new Time(min, sec) }, () =>\r\n      Title.setTime(this.state.time.toString())\r\n    );\r\n\r\n  handleSecondPassed = () => {\r\n    const { time, overtime } = this.state;\r\n\r\n    if (overtime) return this.onOvertime();\r\n\r\n    const nextTime = { ...time };\r\n\r\n    if (time.sec === 0 && time.min === 0)\r\n      if (Session.getOvertime())\r\n        return this.setState({ overtime: true }, () => this.playSound());\r\n      else return this.timerFinished();\r\n\r\n\r\n    if (time.sec === 0) {\r\n      nextTime.min = time.min - 1;\r\n      nextTime.sec = 59;\r\n    } else {\r\n      nextTime.sec = time.sec - 1;\r\n    }\r\n\r\n    this.setTime(nextTime.min, nextTime.sec);\r\n  };\r\n\r\n  onOvertime = () => {\r\n    const { time } = this.state;\r\n\r\n    const nextTime = { ...time };\r\n\r\n    if (time.sec === 59) {\r\n      nextTime.min = time.min + 1;\r\n      nextTime.sec = 0;\r\n    } else {\r\n      nextTime.sec = time.sec + 1;\r\n    }\r\n\r\n    this.setTime(nextTime.min, nextTime.sec);\r\n  }\r\n\r\n  handleTimerToggle = async () => {\r\n    const { running, overtime } = this.state;\r\n\r\n    if (overtime) this.setState({ overtime: false }, () => {\r\n      this.props.onOvertimeDone(this.state.time.totalSeconds);\r\n      this.timerFinished();\r\n    });\r\n\r\n    if (running) await this.stopTimer();\r\n    else await this.startTimer();\r\n\r\n    Title.setState(this.isPaused());\r\n  };\r\n\r\n  async stopTimer() {\r\n    const { timer } = this.state;\r\n    const { onTimerStop } = this.props;\r\n\r\n    clearInterval(timer);\r\n    await this.setState({ timer: null, running: false });\r\n    onTimerStop();\r\n  }\r\n\r\n  async startTimer() {\r\n    const { running } = this.state;\r\n    const { onTimerStart } = this.props;\r\n\r\n    if (running) await this.stopTimer();\r\n\r\n    await this.setState({\r\n      timer: setInterval(this.handleSecondPassed, 1000),\r\n      running: true\r\n    });\r\n    onTimerStart();\r\n  }\r\n\r\n  onNewSession = () => {\r\n    const { currentSessionValue, startOnChange } = this.props;\r\n\r\n    this.setTime(currentSessionValue, 0);\r\n    if (startOnChange) this.startTimer();\r\n  };\r\n\r\n  timerFinished = () => {\r\n    const { onTimerDone } = this.props;\r\n\r\n    this.stopTimer();\r\n    if (!Session.getOvertime()) this.playSound();\r\n    onTimerDone();\r\n  };\r\n\r\n  playSound() {\r\n    this.setState({ playSound: true }, () => {\r\n      setTimeout(() => this.setState({ playSound: false }), 5000);\r\n    });\r\n  }\r\n\r\n  isPaused = () => {\r\n    const { time, timer } = this.state;\r\n    const { currentSessionValue } = this.props;\r\n\r\n    return (\r\n      !timer &&\r\n      time.min !== currentSessionValue &&\r\n      (time.min !== 0 && time.sec !== 0)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { time, playSound, overtime } = this.state;\r\n    const { isPomodoro } = this.props;\r\n\r\n    let classes = 'time clickable';\r\n    const blink = this.isPaused() ? ' blink' : '',\r\n      color = isPomodoro ? ' working' : ' break';\r\n    classes += blink + color;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h3 id=\"time\" className={classes} onClick={this.handleTimerToggle}>\r\n          {overtime ? `+${time.toString()}` : time.toString()}\r\n        </h3>\r\n        <Sound play={playSound} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  currentSessionValue: PropTypes.number.isRequired,\r\n  isPomodoro: PropTypes.bool.isRequired,\r\n  startOnChange: PropTypes.bool.isRequired,\r\n  onTimerStart: PropTypes.func.isRequired,\r\n  onTimerStop: PropTypes.func.isRequired,\r\n  onTimerDone: PropTypes.func.isRequired,\r\n  onOvertimeDone: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row } from 'reactstrap';\r\nimport AppNavbar from './components/appNavbar';\r\nimport InfoModal from './components/infoModal';\r\nimport SettingsModal from './components/settingsModal';\r\nimport LeftToBottomCol from './components/leftToBottomCol';\r\nimport RightToTopCol from './components/rightToTopCol';\r\nimport SessionButtons from './components/sessionButtons';\r\nimport Summary from './components/summary';\r\nimport Tasks from './components/tasks';\r\nimport Timer from './components/timer';\r\nimport Session from './models/session';\r\nimport './App.css';\r\nimport settingsService from './services/settingsService';\r\nimport Title from './models/title';\r\nimport Time from './models/time';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentSession: 0,\r\n    taskCount: 0,\r\n    pomodoroCount: 0,\r\n    pendingPomodoro: false,\r\n    isWorking: false,\r\n    infoModalOpen: false,\r\n    settingsModalOpen: false,\r\n    initCompleted: false,\r\n    overtime: {\r\n      pomodori: 0,\r\n      breaks: 0\r\n    }\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.initSettings();\r\n  }\r\n\r\n  async initSettings() {\r\n    this.initTimers();\r\n    this.initOtherSettings();\r\n    this.initTitle();\r\n    await this.setState({ currentSession: Session.POMODORO },\r\n      () => this.setState({ initCompleted: true }))\r\n  }\r\n\r\n  initTimers() {\r\n    const timers = settingsService.getTimers();\r\n    Session.setTimers(timers);\r\n  }\r\n\r\n  initOtherSettings() {\r\n    const overtime = settingsService.getOvertime();\r\n    Session.setOvertime(overtime);\r\n  }\r\n\r\n  initTitle() {\r\n    const { currentSession } = this.state;\r\n    Title.setSession(Session.getTextFromTime(currentSession));\r\n  }\r\n\r\n  onPomodoroFinished() {\r\n    const { pomodoroCount: oldPomodoroCount } = this.state;\r\n\r\n    const pomodoroCount = oldPomodoroCount + 1;\r\n\r\n    this.setState({\r\n      pomodoroCount,\r\n      pendingPomodoro: true\r\n    });\r\n    this.handleSetSession(Session.getBreakduration(pomodoroCount));\r\n  }\r\n\r\n  handleSessionEnd = () => {\r\n    const { currentSession } = this.state;\r\n\r\n    if (currentSession === Session.POMODORO) this.onPomodoroFinished();\r\n    else this.handleSetSession(Session.POMODORO);\r\n  };\r\n\r\n  handleSetSession = session =>\r\n    this.setState({ currentSession: session }, () =>\r\n      Title.setSession(Session.getTextFromTime(this.state.currentSession))\r\n    );\r\n\r\n  handleTimerStart = () => {\r\n    this.setState({\r\n      isWorking: this.state.currentSession === Session.POMODORO\r\n    });\r\n  };\r\n\r\n  handleTimerStop = () => this.setState({ isWorking: false });\r\n\r\n  handleTaskCountChange = (taskCount, pomodoroCount) =>\r\n    this.setState({ taskCount, pomodoroCount });\r\n\r\n  handlePomodoroAssigned = () => {\r\n    if (this.state.pendingPomodoro) this.setState({ pendingPomodoro: false });\r\n  };\r\n\r\n  handleInfoModalToggle = () =>\r\n    this.setState({ infoModalOpen: !this.state.infoModalOpen });\r\n\r\n  handleSettingsModalToggle = () =>\r\n    this.setState({ settingsModalOpen: !this.state.settingsModalOpen });\r\n\r\n  handleOvertime = sec => {\r\n    const overtime = { ...this.state.overtime };\r\n    const { currentSession } = this.state;\r\n\r\n    if (currentSession === Session.POMODORO) overtime.pomodori += sec;\r\n    else overtime.breaks += sec;\r\n\r\n    this.setState({ overtime });\r\n  }\r\n\r\n  mapOvertimeToString = ({ pomodori, breaks }) => ({\r\n    pomodori: Time.secToMinSecString(pomodori),\r\n    breaks: Time.secToMinSecString(breaks)\r\n  });\r\n\r\n  render() {\r\n    const {\r\n      pomodoroCount,\r\n      currentSession,\r\n      pendingPomodoro,\r\n      isWorking,\r\n      taskCount,\r\n      infoModalOpen,\r\n      settingsModalOpen,\r\n      initCompleted,\r\n      overtime\r\n    } = this.state;\r\n\r\n    const isSessionPomodoro = currentSession === Session.POMODORO;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <AppNavbar\r\n          title=\"Pomodori Story\"\r\n          isBreakTime={!isSessionPomodoro}\r\n          isWorking={isWorking}\r\n          onInfoClick={this.handleInfoModalToggle}\r\n          onSettingsClick={this.handleSettingsModalToggle}\r\n        />\r\n        <InfoModal\r\n          isOpen={infoModalOpen}\r\n          onToggle={this.handleInfoModalToggle}\r\n        />\r\n        {initCompleted && (\r\n          <SettingsModal\r\n            isOpen={settingsModalOpen}\r\n            onToggle={this.handleSettingsModalToggle}\r\n          />\r\n        )}\r\n        <Container>\r\n          <Row>\r\n            <LeftToBottomCol>\r\n              <Tasks\r\n                pendingPomodoro={pendingPomodoro}\r\n                onTasksChanged={this.handleTaskCountChange}\r\n                onPomodoroAssigned={this.handlePomodoroAssigned}\r\n                DEBUG_se_hack={this.handleSessionEnd}\r\n              />\r\n            </LeftToBottomCol>\r\n            <RightToTopCol>\r\n              <SessionButtons\r\n                currentSession={currentSession}\r\n                onButtonClick={this.handleSetSession}\r\n              />\r\n              <Timer\r\n                currentSessionValue={currentSession}\r\n                isPomodoro={isSessionPomodoro}\r\n                startOnChange={initCompleted}\r\n                onTimerStart={this.handleTimerStart}\r\n                onTimerStop={this.handleTimerStop}\r\n                onTimerDone={this.handleSessionEnd}\r\n                onOvertimeDone={this.handleOvertime}\r\n              />\r\n              <Summary\r\n                taskCount={taskCount}\r\n                pomodoroCount={pomodoroCount}\r\n                overtime={this.mapOvertimeToString(overtime)}\r\n                showOvertime={Session.OVERTIME}\r\n              />\r\n            </RightToTopCol>\r\n          </Row>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}