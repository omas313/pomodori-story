{"version":3,"sources":["context/themeContext.js","components/appNavbar.jsx","components/infoModal.jsx","components/rangeInput.jsx","models/session.js","components/checkbox.jsx","services/settingsService.js","components/settingsModal.jsx","components/leftToBottomCol.jsx","components/rightToTopCol.jsx","components/sessionButtons.jsx","components/summary.jsx","components/taskInput.jsx","components/taskButtons.jsx","types/index.js","components/taskComponent.jsx","components/taskList.jsx","services/taskService.js","models/task.js","components/tasks.jsx","models/time.js","components/sound.jsx","models/title.js","components/timer.jsx","App.js","serviceWorker.js","index.js"],"names":["colors","themes","light","primary","primaryDarker","secondary","secondaryDarker","tertiary","foreground","background","controlForeground","controlBackground","controlBackgroundFocus","dark","ThemeContext","React","createContext","theme","toggleTheme","AppNavbar","state","isOpen","handleToggle","_this","setState","_this2","this","_this$props","props","title","isBreakTime","isWorking","onInfoClick","onSettingsClick","Object","core_browser_esm","Consumer","_ref","colorize","keyframes","_templateObject","baseStyles","css","_templateObject2","breakStyles","_templateObject3","workingStyle","_templateObject4","styles","filter","s","reactstrap_es","expand","href","onClick","navbar","className","id","Component","InfoModal","onToggle","_ref2","modalStyles","infoModal_templateObject","toggle","target","rel","RangeInput","value","handleChange","input","currentTarget","name","min","max","onChange","Number","default","_this$props2","label","for","rangeInput_templateObject","type","defaultProps","Session","OVERTIME","DARK_MODE","POMODORO","SHORT_BREAK","LONG_BREAK","TIMER_MIN","TIMER_MAX","getOvertime","setOvertime","getDarkMode","setDarkMode","validTimers","timers","keys","some","k","setTimers","pomodoro","shortBreak","longBreak","getTimers","getBreakduration","pomodori","getTextFromTime","time","Checkbox","checked","react_default","a","createElement","check","timersKeys","overtimeKey","darkModeKey","settingsService","values","map","localStorage","getItem","saveTimers","setItem","toString","SettingsModal","overtime","darkMode","handleTimerChange","objectSpread","handleOvertimeChange","handleToggleTheme","prevProps","prevState","save","_this$state","_this$state2","settingsModal_templateObject","submitButtonStyles","settingsModal_templateObject2","rangeInput","components_checkbox","style","textAlignLast","color","LeftToBottomCol","children","lg","size","order","xs","RightToTopCol","SessionButtons","isActive","sess","currentSession","onButtonClick","_","sessionButtons_templateObject","pomodoroButtonStyles","sessionButtons_templateObject2","breakButtonStyles","sessionButtons_templateObject3","src","alt","Summary","taskCount","pomodoroCount","showOvertime","summary_templateObject","breaks","TaskInput","text","handleKeyDown","key","handleSubmit","trim","onSubmit","placeholder","_ref3","taskInput_templateObject","onKeyDown","onBlur","autoFocus","TaskButtons","shape","_id","string","isRequired","number","task","onDelete","hideEditButton","onEditClick","Fragment","outline","newName","isEditing","renderSubmitEditButton","renderActionButtons","TaskComponent","handleEditClick","handleEditSubmit","onEdit","getBadgeStyles","taskComponent_templateObject","taskComponent_templateObject2","taskComponent_templateObject3","_this2$state","_this2$props","onSetActive","taskComponent_templateObject4","concat","taskInput","md","pill","taskButtons","TaskList","taskId","currentTask","tasks","onSetActiveTask","flush","length","taskComponent","taskService","getAll","JSON","parse","stringify","Task","classCallCheck","addPomodoro","getDefaultTask","Tasks","handleSetActiveTask","handleNewTask","arguments","undefined","DEBUG_se_hack","toConsumableArray","Math","random","push","handleDeleteTask","oldTasks","newTask","updates","splice","indexOf","handleEditTask","index","findIndex","t","initTasks","onTasksChanged","pendingPomodoro","addPomodoroToCurrentTask","reduce","curr","getTotalPomodori","_this$state3","onPomodoroAssigned","_this$state4","taskList","Time","sec","floor","m","seconds","mins","secs","Sound","possibleConstructorReturn","getPrototypeOf","call","audioRef","createRef","current","volume","play","ref","Title","session","isPaused","update","document","setSession","setTime","Timer","running","timer","playSound","handleSecondPassed","onOvertime","nextTime","timerFinished","handleTimerToggle","_callee","regenerator_default","wrap","_context","prev","next","onOvertimeDone","totalSeconds","stopTimer","startTimer","stop","onNewSession","currentSessionValue","startOnChange","onTimerDone","onTimerStop","clearInterval","onTimerStart","setInterval","setTimeout","_this3","isPomodoro","timer_templateObject","blink","timer_templateObject2","sound_Sound","App","handleSessionEnd","onPomodoroFinished","handleSetSession","handleTimerStart","handleTimerStop","handleTaskCountChange","handlePomodoroAssigned","handleInfoModalToggle","infoModalOpen","handleSettingsModalToggle","settingsModalOpen","handleOvertime","mapOvertimeToString","secToMinSecString","initCompleted","width","height","minHeight","margin","position","top","left","bottom","right","overflow","initSettings","initTimers","initOtherSettings","initTitle","Provider","renderContent","isSessionPomodoro","appNavbar","infoModal","settingsModal","leftToBottomCol","components_tasks","rightToTopCol","sessionButtons","components_timer","summary","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bc5177d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst colors = {\r\n  primary: '#db0504',\r\n  primaryDarker: '#800100',\r\n  secondary: '#e84a07',\r\n  secondaryDarker: '#612004',\r\n  tertiary: '#ff9900',\r\n  light: '#eff5dc',\r\n  textLight: '#ccd2df',\r\n  textDark: '#800100',\r\n  bgLight: '#fff0f0',\r\n  bgPrimaryLight: '#ffbfbf',\r\n  bgPrimaryLighter: '#fff0f0',\r\n  bgDark: '#272727',\r\n  bgDarker: '#212121',\r\n};\r\n\r\nexport const themes = {\r\n  light: {\r\n    primary: colors.primary,\r\n    primaryDarker: colors.primaryDarker,\r\n    secondary: colors.secondary,\r\n    secondaryDarker: colors.secondaryDarker,\r\n    tertiary: colors.tertiary,\r\n    light: colors.light,\r\n    foreground: colors.textDark,\r\n    background: colors.bgLight,\r\n    controlForeground: colors.textDark,\r\n    controlBackground: colors.bgPrimaryLight,\r\n    controlBackgroundFocus: colors.bgPrimaryLighter,\r\n  },\r\n  dark: {\r\n    primary: colors.primary,\r\n    primaryDarker: colors.primaryDarker,\r\n    secondary: colors.secondary,\r\n    secondaryDarker: colors.secondaryDarker,\r\n    tertiary: colors.tertiary,\r\n    light: colors.light,\r\n    foreground: colors.textLight,\r\n    background: colors.bgDark,\r\n    controlForeground: colors.textLight,\r\n    controlBackground: colors.bgDarker,\r\n    controlBackgroundFocus: colors.bgDark,\r\n  },\r\n};\r\n\r\nexport const ThemeContext = React.createContext({\r\n  theme: themes.dark,\r\n  toggleTheme: () => { }\r\n});\r\n","/** @jsx jsx */\r\nimport { css, jsx, keyframes } from '@emotion/core';\r\nimport { Component } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\nimport { ThemeContext } from '../context/themeContext';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass AppNavbar extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  handleToggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { isOpen } = this.state;\r\n    const {\r\n      title,\r\n      isBreakTime,\r\n      isWorking,\r\n      onInfoClick,\r\n      onSettingsClick\r\n    } = this.props;\r\n\r\n\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {({ theme, toggleTheme }) => {\r\n          const colorize = keyframes`\r\n            0% { background-color: ${theme.primary}; }\r\n            20% { background-color: ${theme.secondary}; }\r\n            60% { background-color: ${theme.tertiary} }\r\n            100% { background-color: ${theme.primary} }\r\n          `;\r\n          const baseStyles = css`\r\n            background-color: ${theme.primary};\r\n            margin-bottom: 2rem;\r\n            transition: background-color 1s;\r\n\r\n            a.navbar-brand, a.nav-link, .navbar-toggler-icon{\r\n              color: ${theme.light} !important;\r\n            }\r\n          `;\r\n          const breakStyles = css`\r\n            background-color: ${theme.secondary};\r\n            margin-bottom: 2rem;\r\n          `;\r\n          const workingStyle = css`\r\n            animation: ${colorize} 10s ease-in-out 0.4s infinite;\r\n            -webkit-animation: ${colorize} 10s ease-in-out 0.4s infinite;\r\n          `;\r\n\r\n          const styles = [\r\n            baseStyles,\r\n            isBreakTime ? breakStyles : null,\r\n            isWorking ? workingStyle : null\r\n          ].filter(s => s !== null);\r\n\r\n          return (\r\n            <div>\r\n              <Navbar css={styles} dark expand=\"md\">\r\n                <NavbarBrand href=\"/\">{title}</NavbarBrand>\r\n                <NavbarToggler onClick={this.handleToggle} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                  <Nav className=\"ml-auto\" navbar>\r\n                    <NavItem>\r\n                      <NavLink\r\n                        id=\"info-nav-link\"\r\n                        className=\"clickable\"\r\n                        onClick={onInfoClick}\r\n                      >\r\n                        Info\r\n                    </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                      <NavLink\r\n                        id=\"settings-nav-link\"\r\n                        className=\"clickable\"\r\n                        onClick={onSettingsClick}\r\n                      >\r\n                        Settings\r\n                    </NavLink>\r\n                    </NavItem>\r\n                  </Nav>\r\n                </Collapse>\r\n              </Navbar>\r\n            </div>\r\n          );\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\n// TODO: make prop names clearer\r\nAppNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  isBreakTime: PropTypes.bool.isRequired,\r\n  isWorking: PropTypes.bool.isRequired,\r\n  onInfoClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AppNavbar;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport { ThemeContext } from '../context/themeContext';\r\n\r\nconst InfoModal = ({ isOpen, onToggle }) => {\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({ theme, toggleTheme }) => {\r\n        const modalStyles = css`\r\n          max-height: 80vh !important;\r\n          max-width: 80vw !important;\r\n          background-color: ${theme.background} !important;\r\n          margin: 0.5rem auto;\r\n\r\n          a {\r\n            color: ${theme.primary} !important;\r\n            text-decoration: none;\r\n          }\r\n          a:hover {\r\n            color: ${theme.secondary} !important;\r\n            text-decoration: none;\r\n          }\r\n          .modal-header {\r\n            background-color: ${theme.primary};\r\n            border: none;\r\n          }\r\n          .modal-content {\r\n            background-color: ${theme.background};\r\n            color: ${theme.foreground};\r\n            border: none;\r\n            border-radius: 0;\r\n            outline: none;\r\n          }\r\n          button span {\r\n            color: ${theme.foreground}\r\n          }\r\n        `;\r\n\r\n        return (\r\n          <Modal css={modalStyles} isOpen={isOpen} toggle={onToggle} className=\"info-modal\">\r\n            <ModalHeader toggle={onToggle}>Info</ModalHeader>\r\n            <ModalBody>\r\n              <h5>Pomodoro, pomodori?</h5>\r\n              <p>Pomodoro is the Italian word for tomato, and the plural is pomodori.</p>\r\n\r\n              <h5>What is this website?</h5>\r\n              <p>\r\n                It is a timer web application I developed to implement the Pomodoro\r\n                Technique.\r\n              </p>\r\n\r\n              <h5>The Pomodoro Technique</h5>\r\n              <p>\r\n                It is a time-management and productivity booster technique created by\r\n                Francesco Cirillo.\r\n                <br />\r\n                It can help size up tasks and maintain focus throughout your work by\r\n                diving it into time chunks.\r\n                <br />\r\n                You can read more about it{' '}\r\n                <a\r\n                  href=\"https://francescocirillo.com/pages/pomodoro-technique\"\r\n                  className=\"link\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  here\r\n                </a>\r\n                .\r\n              </p>\r\n            </ModalBody>\r\n          </Modal>\r\n        );\r\n      }}\r\n    </ThemeContext.Consumer>\r\n  );\r\n};\r\n\r\nInfoModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default InfoModal;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Input, FormGroup, Label } from 'reactstrap';\r\nimport { ThemeContext } from '../context/themeContext';\r\n\r\nclass RangeInput extends Component {\r\n  state = {\r\n    value: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ value: this.props.default });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const { name, min, max, onChange } = this.props;\r\n\r\n    if (input.value < min || input.value > max) return;\r\n\r\n    onChange(name, Number(input.value));\r\n    this.setState({ value: input.value });\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const { name, label, min, max } = this.props;\r\n\r\n    return (\r\n      <FormGroup>\r\n        <Row>\r\n          <Col>\r\n            <Label for={name}>{label}</Label>\r\n          </Col>\r\n          <Col>\r\n            <ThemeContext.Consumer>\r\n              {({ theme, toggleTheme }) => {\r\n                const styles = css`\r\n                  border: 1px solid ${theme.primary} !important;\r\n                  font-size: 1.1rem !important;\r\n                  transition: background-color 0.3s, border-color 0.3s;\r\n                  background-color: ${theme.controlBackground} !important;\r\n                  color: ${theme.controlForeground}  !important;\r\n                  \r\n                  &:focus {\r\n                    background-color: ${theme.controlBackgroundFocus} !important;\r\n                    color: ${theme.foreground}  !important;\r\n                    box-shadow: none !important;\r\n                  }\r\n                `\r\n                return (\r\n                  <Input\r\n                    css={styles}\r\n                    type=\"number\"\r\n                    min={min}\r\n                    max={max}\r\n                    name={name}\r\n                    value={value}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                );\r\n              }}\r\n            </ThemeContext.Consumer>\r\n          </Col>\r\n        </Row>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nRangeInput.propTypes = {\r\n  name: PropTypes.string,\r\n  value: PropTypes.number,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nRangeInput.defaultProps = {\r\n  name: '',\r\n  value: 0,\r\n  onChange: () => null\r\n};\r\n\r\nexport default RangeInput;\r\n","export default class Session {\r\n  static OVERTIME = false;\r\n  static DARK_MODE = false;\r\n  static POMODORO = 25;\r\n  static SHORT_BREAK = 5;\r\n  static LONG_BREAK = 10;\r\n  static TIMER_MIN = 1;\r\n  static TIMER_MAX = 120;\r\n\r\n  static getOvertime = () => Session.OVERTIME;\r\n  static setOvertime = (value) => Session.OVERTIME = value;\r\n\r\n  static getDarkMode = () => Session.DARK_MODE;\r\n  static setDarkMode = (value) => Session.DARK_MODE = value;\r\n\r\n  static validTimers = timers =>\r\n    !Object.keys(timers).some(\r\n      k => timers[k] < Session.TIMER_MIN || timers[k] > Session.TIMER_MAX\r\n    );\r\n\r\n  static setTimers = timers => {\r\n    if (timers.pomodoro !== 0) Session.POMODORO = timers.pomodoro;\r\n    if (timers.shortBreak !== 0) Session.SHORT_BREAK = timers.shortBreak;\r\n    if (timers.longBreak !== 0) Session.LONG_BREAK = timers.longBreak;\r\n  };\r\n\r\n  static getTimers = () => {\r\n    return {\r\n      pomodoro: Session.POMODORO,\r\n      shortBreak: Session.SHORT_BREAK,\r\n      longBreak: Session.LONG_BREAK\r\n    };\r\n  };\r\n\r\n  static getBreakduration = pomodori =>\r\n    pomodori > 0 && pomodori % 4 === 0\r\n      ? Session.LONG_BREAK\r\n      : Session.SHORT_BREAK;\r\n\r\n  static getTextFromTime = time => {\r\n    switch (time) {\r\n      case Session.SHORT_BREAK:\r\n        return 'Break (S)';\r\n\r\n      case Session.LONG_BREAK:\r\n        return 'Break (L)';\r\n\r\n      default:\r\n        return 'Pomodoro';\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Row, Input, FormGroup, Label } from 'reactstrap';\r\n\r\nclass Checkbox extends Component {\r\n  state = {\r\n    value: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ value: this.props.default });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const value = input.checked;\r\n    this.props.onChange(value);\r\n    this.setState({ value });\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const { label } = this.props;\r\n\r\n    return (\r\n      <FormGroup check>\r\n        <Row>\r\n          <Col>\r\n            <Label check>\r\n              <Input type=\"checkbox\" checked={value} onChange={this.handleChange} />{' '}\r\n              {label}\r\n            </Label>\r\n          </Col>\r\n        </Row>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nCheckbox.propTypes = {\r\n  default: PropTypes.bool,\r\n  label: PropTypes.string\r\n};\r\n\r\nCheckbox.defaultProps = {\r\n  default: false,\r\n  onChange: () => null\r\n};\r\n\r\nexport default Checkbox;\r\n","const timersKeys = {\r\n  pomodoro: 'pomodoro',\r\n  shortBreak: 'sb',\r\n  longBreak: 'lb'\r\n};\r\nconst overtimeKey = 'overtime';\r\nconst darkModeKey = 'darkMode';\r\n\r\nfunction getTimers() {\r\n  const values = Object.keys(timersKeys).map(k =>\r\n    Number(localStorage.getItem(timersKeys[k]))\r\n  );\r\n  return {\r\n    pomodoro: values[0],\r\n    shortBreak: values[1],\r\n    longBreak: values[2]\r\n  };\r\n}\r\n\r\nfunction saveTimers(timers) {\r\n  localStorage.setItem(timersKeys.pomodoro, timers.pomodoro);\r\n  localStorage.setItem(timersKeys.shortBreak, timers.shortBreak);\r\n  localStorage.setItem(timersKeys.longBreak, timers.longBreak);\r\n}\r\n\r\nfunction getOvertime() {\r\n  const value = localStorage.getItem(overtimeKey);\r\n  if (value === null) return false;\r\n  return value.toString() === \"true\";\r\n}\r\n\r\nfunction setOvertime(value) {\r\n  if (value === null) value = false;\r\n  localStorage.setItem(overtimeKey, value.toString() === \"true\");\r\n}\r\n\r\nfunction getDarkMode() {\r\n  const value = localStorage.getItem(darkModeKey);\r\n  if (value === null) return false;\r\n  return value.toString() === \"true\";\r\n}\r\n\r\nfunction setDarkMode(value) {\r\n  if (value === null) value = false;\r\n  localStorage.setItem(darkModeKey, value.toString() === \"true\");\r\n}\r\n\r\nexport default {\r\n  getTimers,\r\n  saveTimers,\r\n  getOvertime,\r\n  setOvertime,\r\n  getDarkMode,\r\n  setDarkMode\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody, Button } from 'reactstrap';\r\nimport RangeInput from './rangeInput';\r\nimport Session from './../models/session';\r\nimport Checkbox from './checkbox';\r\nimport { ThemeContext, themes } from '../context/themeContext';\r\nimport settingsService from '../services/settingsService';\r\n\r\nclass SettingsModal extends Component {\r\n  state = {\r\n    timers: {\r\n      pomodoro: 0,\r\n      shortBreak: 0,\r\n      longBreak: 0\r\n    },\r\n    overtime: false,\r\n    darkMode: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      timers: Session.getTimers(),\r\n      overtime: Session.getOvertime(),\r\n      darkMode: Session.getDarkMode()\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.isOpen && !this.props.isOpen) this.save();\r\n  }\r\n\r\n  handleTimerChange = (name, value) => {\r\n    const timers = { ...this.state.timers };\r\n    timers[name] = value;\r\n    this.setState({ timers });\r\n  };\r\n\r\n  handleOvertimeChange = value => {\r\n    this.setState({ overtime: value });\r\n  };\r\n\r\n  handleToggleTheme = (value, toggle) => {\r\n    this.setState({ darkMode: value });\r\n    toggle()\r\n  };\r\n\r\n  save() {\r\n    const { timers, overtime, darkMode } = this.state;\r\n\r\n    if (!Session.validTimers(timers)) return;\r\n\r\n    Session.setTimers(timers);\r\n    Session.setOvertime(overtime);\r\n    Session.setDarkMode(darkMode);\r\n    settingsService.saveTimers(timers);\r\n    settingsService.setOvertime(overtime);\r\n    settingsService.setDarkMode(darkMode);\r\n  }\r\n\r\n  render() {\r\n    const { timers, overtime } = this.state;\r\n    const { isOpen, onToggle } = this.props;\r\n\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {({ theme, toggleTheme }) => {\r\n          const modalStyles = css`\r\n            .modal-header {\r\n              background-color: ${theme.primary};\r\n              border: none;\r\n            }\r\n            .modal-content {\r\n              background-color: ${theme.background};\r\n              color: ${theme.foreground}\r\n            }\r\n            button span {\r\n              color: ${theme.foreground}\r\n            }\r\n          `;\r\n\r\n          const submitButtonStyles = css`\r\n            background-color: ${theme.primary}\r\n          `;\r\n\r\n          return (\r\n            <Modal isOpen={isOpen} toggle={onToggle} css={modalStyles}>\r\n              <ModalHeader toggle={onToggle}>Settings</ModalHeader>\r\n              <ModalBody>\r\n                <div className=\"mb-3\">\r\n                  <strong>Timer Durations</strong>\r\n                </div>\r\n                <RangeInput\r\n                  name=\"pomodoro\"\r\n                  label=\"Pomodoro\"\r\n                  min={Session.TIMER_MIN}\r\n                  max={Session.TIMER_MAX}\r\n                  default={timers.pomodoro}\r\n                  onChange={this.handleTimerChange}\r\n                />\r\n                <RangeInput\r\n                  name=\"shortBreak\"\r\n                  label=\"Short Break\"\r\n                  min={Session.TIMER_MIN}\r\n                  max={Session.TIMER_MAX}\r\n                  default={timers.shortBreak}\r\n                  onChange={this.handleTimerChange}\r\n                />\r\n                <RangeInput\r\n                  name=\"longBreak\"\r\n                  label=\"Long Break\"\r\n                  min={Session.TIMER_MIN}\r\n                  max={Session.TIMER_MAX}\r\n                  default={timers.longBreak}\r\n                  onChange={this.handleTimerChange}\r\n                />\r\n                <Checkbox\r\n                  label=\"Overtime\"\r\n                  default={overtime}\r\n                  onChange={this.handleOvertimeChange}\r\n                />\r\n                <Checkbox\r\n                  label=\"Dark theme\"\r\n                  default={theme === themes.dark}\r\n                  onChange={value => this.handleToggleTheme(value, toggleTheme)}\r\n                />\r\n                <div style={{ textAlignLast: 'right' }}>\r\n                  <Button\r\n                    css={submitButtonStyles}\r\n                    id=\"settings-submit-button\"\r\n                    color=\"danger\"\r\n                    onClick={onToggle}\r\n                  >\r\n                    Submit\r\n            </Button>\r\n                </div>\r\n              </ModalBody>\r\n            </Modal>\r\n          );\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nSettingsModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SettingsModal;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst LeftToBottomCol = ({ children }) => (\r\n  <Col\r\n    lg={{ size: 8, order: 1 }}\r\n    xs={{ size: 12, order: 2 }}\r\n    className=\"left-to-bottom-column\"\r\n  >\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default LeftToBottomCol;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst RightToTopCol = ({ children }) => (\r\n  <Col lg={{ size: 4, order: 2 }} xs={{ size: 12, order: 1 }}>\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default RightToTopCol;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport Session from '../models/session';\r\nimport { ThemeContext } from '../context/themeContext';\r\n\r\nclass SessionButtons extends Component {\r\n  isActive = sess => this.props.currentSession === sess;\r\n\r\n  render() {\r\n    const { onButtonClick } = this.props;\r\n\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {({ theme, _ }) => {\r\n          const baseStyles = css`\r\n            text-align: center;\r\n            \r\n            button {\r\n              color: ${theme.light} !important;\r\n              width: 70px;\r\n              height: 70px;\r\n              margin: 3px;\r\n            }\r\n      \r\n            button img {\r\n              width: 30px;\r\n              max-height: 35px;\r\n            }\r\n          `;\r\n          const pomodoroButtonStyles = css`\r\n            background-color: ${this.isActive(Session.POMODORO) ? theme.primary : theme.primaryDarker} !important;\r\n            border-color: ${this.isActive(Session.POMODORO) ? theme.primary : theme.primaryDarker} !important;\r\n\r\n            &:hover {\r\n              background-color: ${theme.primary} !important;\r\n              border-color: ${theme.primary} !important;\r\n            }\r\n          `;\r\n          const breakButtonStyles = sess => {\r\n            return css`\r\n              background-color: ${this.isActive(sess) ? theme.secondary : theme.secondaryDarker} !important;\r\n              border-color: ${this.isActive(sess) ? theme.secondary : theme.secondaryDarker} !important;\r\n\r\n              &:hover {\r\n                background-color: ${theme.secondary} !important;\r\n                border-color: ${theme.secondary} !important;\r\n              }\r\n            `;\r\n          }\r\n\r\n          return (\r\n            <div css={baseStyles}>\r\n              <Button\r\n                css={pomodoroButtonStyles}\r\n                id=\"pomodoro-button\"\r\n                onClick={() => onButtonClick(Session.POMODORO)}\r\n              >\r\n                <img\r\n                  src=\"./img/pomodoro.png\"\r\n                  alt=\"pomodoro\"\r\n                  className=\"session-button-img\"\r\n                />\r\n              </Button>\r\n              <Button\r\n                css={breakButtonStyles(Session.SHORT_BREAK)}\r\n                className=\"break-button\"\r\n                onClick={() => onButtonClick(Session.SHORT_BREAK)}\r\n              >\r\n                <img\r\n                  src=\"./img/time-5.png\"\r\n                  alt=\"Short break\"\r\n                  className=\"session-button-img\"\r\n                />\r\n              </Button>\r\n              <Button\r\n                css={breakButtonStyles(Session.LONG_BREAK)}\r\n                className=\"break-button\"\r\n                onClick={() => onButtonClick(Session.LONG_BREAK)}\r\n              >\r\n                <img\r\n                  src=\"./img/time-10.png\"\r\n                  alt=\"Long break\"\r\n                  className=\"session-button-img\"\r\n                />\r\n              </Button>\r\n            </div>\r\n          );\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nSessionButtons.propTypes = {\r\n  onButtonClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SessionButtons;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\nimport { ThemeContext } from '../context/themeContext';\r\n\r\nconst Summary = ({ taskCount, pomodoroCount, overtime, showOvertime }) => (\r\n  <ThemeContext.Consumer>\r\n    {({ theme, _ }) => {\r\n      const styles = css`\r\n      border-top: 1px solid ${theme.primary};\r\n      border-bottom: 1px solid ${theme.primary};\r\n      padding: 0.6rem;\r\n      margin: 1rem 0 !important;\r\n    `;\r\n      return (\r\n        <div css={styles}>\r\n          <Row>\r\n            <Col className=\"text-center\">\r\n              <p className=\"text-bold\">Tasks</p>\r\n              <p id=\"summary-task-count\">{taskCount}</p>\r\n            </Col>\r\n            <Col className=\"text-center\">\r\n              <p className=\"text-bold\">Pomodori</p>\r\n              <p id=\"summary-pomodoro-count\">{pomodoroCount}</p>\r\n            </Col>\r\n          </Row>\r\n          {showOvertime && (\r\n            <Row>\r\n              <Col className=\"text-center\">\r\n                <p className=\"text-bold\">Overtime (P)</p>\r\n                <p id=\"summary-overtime-pomodoro\">{overtime.pomodori}</p>\r\n              </Col>\r\n              <Col className=\"text-center\">\r\n                <p className=\"text-bold\">Overtime (B)</p>\r\n                <p id=\"summary-overtime-breaks\">{overtime.breaks}</p>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </div>\r\n      );\r\n    }}\r\n  </ThemeContext.Consumer>\r\n);\r\n\r\n\r\nSummary.propTypes = {\r\n  taskCount: PropTypes.number.isRequired,\r\n  pomodoroCount: PropTypes.number.isRequired,\r\n  overtime: PropTypes.object.isRequired,\r\n  showOvertime: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Summary;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { Component } from 'react'; import PropTypes from 'prop-types';\r\nimport { Input, FormGroup } from 'reactstrap';\r\nimport { ThemeContext } from '../context/themeContext';\r\n\r\nclass TaskInput extends Component {\r\n  state = {\r\n    text: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ text: this.props.text });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    this.props.onChange(input.value);\r\n    this.setState({ text: input.value });\r\n  };\r\n\r\n  handleKeyDown = ({ key }) => {\r\n    const { text } = this.state;\r\n    if (key !== 'Enter') return;\r\n\r\n    this.handleSubmit(text);\r\n  };\r\n\r\n  handleSubmit = text => {\r\n    if (!text.trim()) return;\r\n\r\n    const { onSubmit } = this.props;\r\n\r\n    onSubmit(text);\r\n    this.setState({ text: '' });\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    const { placeholder } = this.props;\r\n\r\n    return (\r\n      <FormGroup>\r\n        <ThemeContext.Consumer>\r\n          {({ theme, _ }) => {\r\n            const styles = css`\r\n              background-color: ${theme.controlBackground};\r\n              color: ${theme.foreground};\r\n              border-color: ${theme.primary};\r\n              \r\n              &:focus {\r\n                color: ${theme.foreground};\r\n                background-color: ${theme.controlBackgroundFocus};\r\n                border-color: ${theme.primary};\r\n                outline: none;\r\n                box-shadow: none;\r\n              }\r\n            `;\r\n\r\n            return (\r\n              <Input\r\n                css={styles}\r\n                name=\"task-input\"\r\n                placeholder={placeholder}\r\n                value={text}\r\n                onChange={this.handleChange}\r\n                onKeyDown={this.handleKeyDown}\r\n                onBlur={() => this.handleSubmit(text)}\r\n                autoFocus\r\n              />\r\n            );\r\n          }}\r\n        </ThemeContext.Consumer>\r\n\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskInput.propTypes = {\r\n  text: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nTaskInput.defaultProps = {\r\n  text: '',\r\n  placeholder: '',\r\n  onChange: () => null\r\n};\r\n\r\nexport default TaskInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport { taskType } from './../types/index';\r\n\r\nclass TaskButtons extends Component {\r\n  renderActionButtons() {\r\n    const { task, onDelete, hideEditButton, onEditClick } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {!hideEditButton && (\r\n          <Button\r\n            id=\"task-edit-button\"\r\n            className=\"action-button task-button\"\r\n            size=\"sm\"\r\n            color=\"primary\"\r\n            outline\r\n            onClick={onEditClick}\r\n          >\r\n            <img src=\"./img/edit.svg\" alt=\"Edit\" />\r\n          </Button>\r\n        )}\r\n        <Button\r\n          id=\"task-delete-button\"\r\n          className=\"action-button task-button\"\r\n          size=\"sm\"\r\n          color=\"primary\"\r\n          outline\r\n          onClick={() => onDelete(task)}\r\n        >\r\n          <img src=\"./img/delete.svg\" alt=\"Delete\" />\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  renderSubmitEditButton() {\r\n    const { newName, onSubmit } = this.props;\r\n\r\n    return (\r\n      <Button\r\n        id=\"task-submit-edit-button\"\r\n        className=\"action-button\"\r\n        size=\"sm\"\r\n        color=\"primary\"\r\n        outline\r\n        onClick={() => onSubmit(newName)}\r\n      >\r\n        <img src=\"./img/check-mark.svg\" alt=\"Edit\" />\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isEditing } = this.props;\r\n    return isEditing\r\n      ? this.renderSubmitEditButton()\r\n      : this.renderActionButtons();\r\n  }\r\n}\r\n\r\nTaskButtons.propTypes = {\r\n  task: taskType,\r\n  newName: PropTypes.string.isRequired,\r\n  hideEditButton: PropTypes.bool.isRequired,\r\n  isEditing: PropTypes.bool.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEditClick: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskButtons;\r\n","import { shape, string, number } from 'prop-types';\r\n\r\nexport const taskType = shape({\r\n  _id: string.isRequired,\r\n  name: string.isRequired,\r\n  pomodori: number.isRequired\r\n});\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { Component } from 'react';\r\nimport { ThemeContext } from '../context/themeContext';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, ListGroupItem, Badge } from 'reactstrap';\r\nimport TaskInput from './taskInput';\r\nimport TaskButtons from './taskButtons';\r\nimport { taskType } from '../types/index';\r\n\r\nclass TaskComponent extends Component {\r\n  state = {\r\n    isEditing: false,\r\n    newName: ''\r\n  };\r\n\r\n  handleEditClick = () => {\r\n    const { isEditing } = this.state;\r\n    this.setState({ isEditing: !isEditing });\r\n  };\r\n\r\n  handleEditSubmit = name => {\r\n    const { task, onEdit } = this.props;\r\n    onEdit(task._id, name);\r\n    this.setState({ isEditing: false });\r\n  };\r\n\r\n  handleChange = newName => {\r\n    this.setState({ newName });\r\n  };\r\n\r\n  getBadgeStyles = theme => {\r\n    const baseStyles = css`\r\n      transition: background-color 0.3s;\r\n    `;\r\n    const colorStyles = this.props.task.pomodori === 0 ?\r\n      css`\r\n        background-color: ${theme.background} !important;\r\n        color: ${theme.foreground} !important;\r\n      `\r\n      : css`\r\n        background-color: ${theme.primary} !important;\r\n        color: ${theme.foreground} !important;\r\n      `;\r\n\r\n    return [baseStyles, colorStyles]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {({ theme, _ }) => {\r\n\r\n          const { isEditing, newName } = this.state;\r\n          const { task, isActive, onSetActive, onDelete } = this.props;\r\n\r\n          const styles = css`\r\n            color: ${theme.foreground} !important;\r\n            border-radius: 10px !important;\r\n            transition: background-color 0.3s, border-color 0.3s, display 0.3s;\r\n            animation: fadeIn 0.3s ease-in 0s 1;\r\n            -webkit-animation: fadeIn 0.3s ease-in 0s 1;\r\n            \r\n            ${isActive ? `\r\n              background-color: ${theme.background} !important;\r\n              border-top: 2px solid ${theme.primary} !important;\r\n              border-bottom: 2px solid ${theme.primary} !important;\r\n              opacity: 1 !important;\r\n            ` : `\r\n              background-color: ${theme.controlBackground} !important;\r\n              border-color: ${theme.primaryDarker} !important;\r\n              margin-left: 3rem;\r\n              margin-right: 3rem;\r\n              opacity: 0.5;\r\n            `}\r\n\r\n            &:hover {\r\n              background-color: ${theme.primary} !important;\r\n            }\r\n            \r\n            & .task-name {\r\n              color: ${theme.foreground};\r\n              overflow: auto;\r\n              font-size: 1.1rem;\r\n            }\r\n\r\n            & .action-button img {\r\n              max-width: 20px;\r\n            }\r\n            \r\n            & .task-button {\r\n              outline: none !important;\r\n              border: none !important;\r\n            }\r\n            \r\n            & .btn-outline-primary {\r\n              color: ${theme.foreground} !important;\r\n              border-color: ${theme.primaryDarker} !important;\r\n            }\r\n            & .btn-outline-primary:hover, & .btn-outline-primary:active {\r\n              background-color: ${theme.foreground} !important;\r\n            }\r\n          `;\r\n\r\n          return (\r\n            <ListGroupItem css={styles}>\r\n              <Row>\r\n                <Col\r\n                  className=\"w-100 clickable task-name\"\r\n                  onClick={() => onSetActive(task)}\r\n                >\r\n                  {isEditing ? (\r\n                    <TaskInput\r\n                      text={task.name}\r\n                      onChange={this.handleChange}\r\n                      onSubmit={this.handleEditSubmit}\r\n                    />\r\n                  ) : (\r\n                      task.name\r\n                    )}\r\n                </Col>\r\n                <Col md=\"2\" xs=\"1\">\r\n                  <Badge css={this.getBadgeStyles(theme)} pill>\r\n                    {task.pomodori}\r\n                  </Badge>\r\n                </Col>\r\n                <Col md=\"3\" xs=\"3\" className=\"text-right action-buttons\">\r\n                  <TaskButtons\r\n                    task={task}\r\n                    newName={newName}\r\n                    isEditing={isEditing}\r\n                    hideEditButton={!isActive}\r\n                    onSubmit={this.handleEditSubmit}\r\n                    onEditClick={this.handleEditClick}\r\n                    onDelete={onDelete}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </ListGroupItem>\r\n          );\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nTaskComponent.propTypes = {\r\n  task: taskType.isRequired,\r\n  isActive: PropTypes.bool,\r\n  onSetActive: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskComponent;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ListGroup } from 'reactstrap';\r\nimport TaskComponent from './taskComponent';\r\nimport { taskType } from '../types';\r\n\r\nclass TaskList extends Component {\r\n  isActive(taskId) {\r\n    const { currentTask } = this.props;\r\n    return currentTask && currentTask._id === taskId;\r\n  }\r\n\r\n  render() {\r\n    const { tasks, onSetActiveTask, onDelete, onEdit } = this.props;\r\n\r\n    return (\r\n      <ListGroup flush>\r\n        {tasks.length === 0 && <p>Add a task and start working!</p>}\r\n        {tasks &&\r\n          tasks.map(task => (\r\n            <TaskComponent\r\n              key={task._id}\r\n              task={task}\r\n              isActive={this.isActive(task._id)}\r\n              onSetActive={onSetActiveTask}\r\n              onDelete={onDelete}\r\n              onEdit={onEdit}\r\n            />\r\n          ))}\r\n      </ListGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.arrayOf(taskType),\r\n  currentTask: taskType,\r\n  onSetActiveTask: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskList;\r\n","const key = 'tasks';\r\n\r\nfunction getAll() {\r\n  return JSON.parse(localStorage.getItem(key));\r\n}\r\n\r\nfunction save(tasks) {\r\n  return localStorage.setItem(key, JSON.stringify(tasks));\r\n}\r\n\r\nexport default { getAll, save };\r\n","export default class Task {\r\n  constructor(id, name, pomodori) {\r\n    this._id = id;\r\n    this.name = name;\r\n    this.pomodori = pomodori;\r\n  }\r\n\r\n  addPomodoro = () => this.pomodori++;\r\n\r\n  static getDefaultTask = () => new Task('1', 'Untitled task', 0);\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskInput from './taskInput';\r\nimport TaskList from './taskList';\r\nimport taskService from '../services/taskService';\r\nimport Task from '../models/task';\r\n\r\nclass Tasks extends Component {\r\n  state = {\r\n    tasks: [],\r\n    currentTask: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initTasks();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.tasks !== this.state.tasks) this.onTasksChanged();\r\n\r\n    if (!prevProps.pendingPomodoro && this.props.pendingPomodoro)\r\n      this.addPomodoroToCurrentTask();\r\n  }\r\n\r\n  initTasks() {\r\n    let tasks = taskService.getAll();\r\n    if (!tasks || tasks.length === 0) tasks = [Task.getDefaultTask()];\r\n\r\n    this.setState({ tasks, currentTask: tasks[0] });\r\n  }\r\n\r\n  getTotalPomodori() {\r\n    const { tasks } = this.state;\r\n    return tasks.length === 0\r\n      ? 0\r\n      : tasks.reduce((t, curr) => t + curr.pomodori, 0);\r\n  }\r\n\r\n  onTasksChanged() {\r\n    const { tasks } = this.state;\r\n    const { onTasksChanged } = this.props;\r\n\r\n    onTasksChanged(tasks.length, this.getTotalPomodori());\r\n    taskService.save(tasks);\r\n  }\r\n\r\n  addPomodoroToCurrentTask() {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n    const { onPomodoroAssigned } = this.props;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.indexOf(currentTask);\r\n    const task = new Task(\r\n      tasks[index]._id,\r\n      tasks[index].name,\r\n      tasks[index].pomodori + 1\r\n    );\r\n    tasks[index] = task;\r\n\r\n    this.setState({\r\n      tasks,\r\n      currentTask: task\r\n    });\r\n    onPomodoroAssigned();\r\n  }\r\n\r\n  handleSetActiveTask = task => {\r\n    this.setState({ currentTask: task });\r\n  };\r\n\r\n  handleNewTask = (name, pomodori = 0) => {\r\n    if (name === '>>es') return this.props.DEBUG_se_hack();\r\n\r\n    const tasks = [...this.state.tasks];\r\n    const task = new Task(\r\n      `${name.length}${Math.random() * 1000000}`,\r\n      name.trim(),\r\n      pomodori\r\n    );\r\n    tasks.push(task);\r\n\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  handleDeleteTask = task => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    if (oldTasks.length <= 1) {\r\n      const newTask = Task.getDefaultTask();\r\n      return this.setState({ tasks: [newTask], currentTask: newTask });\r\n    }\r\n\r\n    let tasks = [...oldTasks];\r\n    const updates = {};\r\n\r\n    tasks.splice(tasks.indexOf(task), 1);\r\n\r\n    updates.tasks = tasks;\r\n    if (!currentTask || task._id === currentTask._id || tasks.length === 1)\r\n      updates.currentTask = tasks[0];\r\n\r\n    this.setState(updates);\r\n  };\r\n\r\n  handleEditTask = (id, name) => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.findIndex(t => t._id === id);\r\n    const task = new Task(tasks[index]._id, name.trim(), tasks[index].pomodori);\r\n    tasks[index] = task;\r\n\r\n    const updates = { tasks };\r\n    if (task._id === currentTask._id) updates.currentTask = task;\r\n    this.setState(updates);\r\n  };\r\n\r\n  render() {\r\n    const { tasks, currentTask } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <TaskInput\r\n          placeholder=\"Enter task here...\"\r\n          onSubmit={this.handleNewTask}\r\n        />\r\n        <TaskList\r\n          tasks={tasks}\r\n          currentTask={currentTask}\r\n          onSetActiveTask={this.handleSetActiveTask}\r\n          onEdit={this.handleEditTask}\r\n          onDelete={this.handleDeleteTask}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTasks.propTypes = {\r\n  pendingPomodoro: PropTypes.bool.isRequired,\r\n  onTasksChanged: PropTypes.func.isRequired,\r\n  onPomodoroAssigned: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Tasks;\r\n","class Time {\r\n  constructor(min, sec) {\r\n    this.min = min;\r\n    this.sec = sec;\r\n  }\r\n\r\n  get totalSeconds() {\r\n    return this.min * 60 + this.sec;\r\n  }\r\n\r\n  incSeconds(s) {\r\n    this.sec += s;\r\n    if (this.sec >= 60) {\r\n      this.min += Math.floor(this.sec / 60);\r\n      this.sec = this.sec % 60;\r\n    }\r\n  }\r\n\r\n  static secToMinSecString(seconds) {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n\r\n    const m = mins < 10 ? `0${mins}` : mins;\r\n    const s = secs < 10 ? `0${secs}` : secs;\r\n    return `${m}:${s}`;\r\n  }\r\n\r\n  toString() {\r\n    const m = this.min < 10 ? `0${this.min}` : this.min;\r\n    const s = this.sec < 10 ? `0${this.sec}` : this.sec;\r\n    return `${m} : ${s}`;\r\n  }\r\n}\r\n\r\nexport default Time;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Sound extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.audioRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.audioRef.current.volume = 0.2;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!prevProps.play && this.props.play)\r\n      this.audioRef.current.play();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <audio src=\"./sound/alert.mp3\" ref={this.audioRef}>\r\n        It looks like your browser doesn't support audio playback through html...\r\n      </audio>\r\n    );\r\n  }\r\n}\r\n","export default class Title {\r\n  static value = '';\r\n\r\n  static session = '';\r\n  static time = '';\r\n  static isPaused = false;\r\n\r\n  static update = () =>\r\n    (document.title =\r\n      `${Title.session} - ${Title.time}` + (Title.isPaused ? ` - PAUSED` : ''));\r\n\r\n  static setSession = session => {\r\n    Title.session = session;\r\n    Title.update();\r\n  };\r\n\r\n  static setTime = time => {\r\n    Title.time = time;\r\n    Title.update();\r\n  };\r\n\r\n  static setState = state => {\r\n    Title.isPaused = state;\r\n    Title.update();\r\n  };\r\n}\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Time from '../models/time';\r\nimport Sound from './sound';\r\nimport Title from './../models/title';\r\nimport Session from '../models/session';\r\nimport { ThemeContext } from '../context/themeContext';\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    running: false,\r\n    time: new Time(0, 0),\r\n    timer: null,\r\n    playSound: false,\r\n    overtime: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setTime(this.props.currentSessionValue, 0);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.currentSessionValue !== this.props.currentSessionValue)\r\n      this.onNewSession();\r\n  }\r\n\r\n  setTime = (min, sec) =>\r\n    this.setState({ time: new Time(min, sec) }, () =>\r\n      Title.setTime(this.state.time.toString())\r\n    );\r\n\r\n  handleSecondPassed = () => {\r\n    const { time, overtime } = this.state;\r\n\r\n    if (overtime) return this.onOvertime();\r\n\r\n    const nextTime = { ...time };\r\n\r\n    if (time.sec === 0 && time.min === 0)\r\n      if (Session.getOvertime())\r\n        return this.setState({ overtime: true }, () => this.playSound());\r\n      else return this.timerFinished();\r\n\r\n\r\n    if (time.sec === 0) {\r\n      nextTime.min = time.min - 1;\r\n      nextTime.sec = 59;\r\n    } else {\r\n      nextTime.sec = time.sec - 1;\r\n    }\r\n\r\n    this.setTime(nextTime.min, nextTime.sec);\r\n  };\r\n\r\n  onOvertime = () => {\r\n    const { time } = this.state;\r\n\r\n    const nextTime = { ...time };\r\n\r\n    if (time.sec === 59) {\r\n      nextTime.min = time.min + 1;\r\n      nextTime.sec = 0;\r\n    } else {\r\n      nextTime.sec = time.sec + 1;\r\n    }\r\n\r\n    this.setTime(nextTime.min, nextTime.sec);\r\n  }\r\n\r\n  handleTimerToggle = async () => {\r\n    const { running, overtime } = this.state;\r\n\r\n    if (overtime) this.setState({ overtime: false }, () => {\r\n      this.props.onOvertimeDone(this.state.time.totalSeconds);\r\n      this.timerFinished();\r\n    });\r\n\r\n    if (running) await this.stopTimer();\r\n    else await this.startTimer();\r\n\r\n    Title.setState(this.isPaused());\r\n  };\r\n\r\n  async stopTimer() {\r\n    const { timer } = this.state;\r\n    const { onTimerStop } = this.props;\r\n\r\n    clearInterval(timer);\r\n    await this.setState({ timer: null, running: false });\r\n    onTimerStop();\r\n  }\r\n\r\n  async startTimer() {\r\n    const { running } = this.state;\r\n    const { onTimerStart } = this.props;\r\n\r\n    if (running) await this.stopTimer();\r\n\r\n    await this.setState({\r\n      timer: setInterval(this.handleSecondPassed, 1000),\r\n      running: true\r\n    });\r\n    onTimerStart();\r\n  }\r\n\r\n  onNewSession = () => {\r\n    const { currentSessionValue, startOnChange } = this.props;\r\n\r\n    this.setTime(currentSessionValue, 0);\r\n    if (startOnChange) this.startTimer();\r\n  };\r\n\r\n  timerFinished = () => {\r\n    const { onTimerDone } = this.props;\r\n\r\n    this.stopTimer();\r\n    if (!Session.getOvertime()) this.playSound();\r\n    onTimerDone();\r\n  };\r\n\r\n  playSound() {\r\n    this.setState({ playSound: true }, () => {\r\n      setTimeout(() => this.setState({ playSound: false }), 5000);\r\n    });\r\n  }\r\n\r\n  isPaused = () => {\r\n    const { time, timer } = this.state;\r\n    const { currentSessionValue } = this.props;\r\n\r\n    return (\r\n      !timer &&\r\n      time.min !== currentSessionValue &&\r\n      (time.min !== 0 && time.sec !== 0)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { time, playSound, overtime } = this.state;\r\n    const { isPomodoro } = this.props;\r\n\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {({ theme, toggleTheme }) => {\r\n          const baseStyles = css`\r\n            margin: 1rem 1rem 2rem 1rem;\r\n            text-align: center;\r\n            font-size: 3rem;\r\n            transition: color 1s;\r\n            cursor: pointer;\r\n            color: ${isPomodoro ? theme.primary : theme.secondary};\r\n\r\n            @media (max-width: 575.98px) {\r\n              font-size: 3rem !important;\r\n            }\r\n            @media(max-width: 991.98px) {\r\n              font-size: 4rem;\r\n            }\r\n            @media (min-width: 1200px) {\r\n              font-size: 4.5rem;\r\n            }\r\n          `;\r\n          const blink = css`\r\n            animation: blink 2s ease-in-out 0s infinite;\r\n            -webkit-animation: blink 2s ease-in-out 0s infinite;\r\n          `;\r\n          const styles = [this.isPaused() ? blink : null, baseStyles];\r\n\r\n          return (\r\n            <React.Fragment>\r\n              <h3 id=\"time\" css={styles} onClick={this.handleTimerToggle}>\r\n                {overtime ? `+${time.toString()}` : time.toString()}\r\n              </h3>\r\n              <Sound play={playSound} />\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  currentSessionValue: PropTypes.number.isRequired,\r\n  isPomodoro: PropTypes.bool.isRequired,\r\n  startOnChange: PropTypes.bool.isRequired,\r\n  onTimerStart: PropTypes.func.isRequired,\r\n  onTimerStop: PropTypes.func.isRequired,\r\n  onTimerDone: PropTypes.func.isRequired,\r\n  onOvertimeDone: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row } from 'reactstrap';\r\nimport AppNavbar from './components/appNavbar';\r\nimport InfoModal from './components/infoModal';\r\nimport SettingsModal from './components/settingsModal';\r\nimport LeftToBottomCol from './components/leftToBottomCol';\r\nimport RightToTopCol from './components/rightToTopCol';\r\nimport SessionButtons from './components/sessionButtons';\r\nimport Summary from './components/summary';\r\nimport Tasks from './components/tasks';\r\nimport Timer from './components/timer';\r\nimport Session from './models/session';\r\nimport settingsService from './services/settingsService';\r\nimport Title from './models/title';\r\nimport Time from './models/time';\r\nimport { ThemeContext, themes } from './context/themeContext';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggleTheme = () => {\r\n      this.setState(state => ({\r\n        theme:\r\n          state.theme === themes.dark\r\n            ? themes.light\r\n            : themes.dark,\r\n      }));\r\n    };\r\n\r\n    this.state = {\r\n      currentSession: 0,\r\n      taskCount: 0,\r\n      pomodoroCount: 0,\r\n      pendingPomodoro: false,\r\n      isWorking: false,\r\n      infoModalOpen: false,\r\n      settingsModalOpen: false,\r\n      initCompleted: false,\r\n      overtime: {\r\n        pomodori: 0,\r\n        breaks: 0\r\n      },\r\n      theme: themes.light,\r\n      toggleTheme: this.toggleTheme\r\n    };\r\n\r\n    this.styles = {\r\n      width: '100%',\r\n      height: '100%',\r\n      minHeight: '100%',\r\n      margin: 0,\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      bottom: 0,\r\n      right: 0,\r\n      overflow: 'auto'\r\n    };\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    await this.initSettings();\r\n  }\r\n\r\n  async initSettings() {\r\n    this.initTimers();\r\n    await this.initOtherSettings();\r\n    this.initTitle();\r\n    await this.setState({ currentSession: Session.POMODORO },\r\n      () => this.setState({ initCompleted: true }));\r\n  }\r\n\r\n  initTimers() {\r\n    const timers = settingsService.getTimers();\r\n    Session.setTimers(timers);\r\n  }\r\n\r\n  async initOtherSettings() {\r\n    const overtime = settingsService.getOvertime();\r\n    Session.setOvertime(overtime);\r\n    const darkMode = settingsService.getDarkMode();\r\n    Session.setDarkMode(darkMode);\r\n    await this.setState({ theme: darkMode ? themes.dark : themes.light })\r\n  }\r\n\r\n  initTitle() {\r\n    const { currentSession } = this.state;\r\n    Title.setSession(Session.getTextFromTime(currentSession));\r\n  }\r\n\r\n  onPomodoroFinished() {\r\n    const { pomodoroCount: oldPomodoroCount } = this.state;\r\n\r\n    const pomodoroCount = oldPomodoroCount + 1;\r\n\r\n    this.setState({\r\n      pomodoroCount,\r\n      pendingPomodoro: true\r\n    });\r\n    this.handleSetSession(Session.getBreakduration(pomodoroCount));\r\n  }\r\n\r\n  handleSessionEnd = () => {\r\n    const { currentSession } = this.state;\r\n\r\n    if (currentSession === Session.POMODORO) this.onPomodoroFinished();\r\n    else this.handleSetSession(Session.POMODORO);\r\n  };\r\n\r\n  handleSetSession = session =>\r\n    this.setState({ currentSession: session }, () =>\r\n      Title.setSession(Session.getTextFromTime(this.state.currentSession))\r\n    );\r\n\r\n  handleTimerStart = () => {\r\n    this.setState({\r\n      isWorking: this.state.currentSession === Session.POMODORO\r\n    });\r\n  };\r\n\r\n  handleTimerStop = () => this.setState({ isWorking: false });\r\n\r\n  handleTaskCountChange = (taskCount, pomodoroCount) =>\r\n    this.setState({ taskCount, pomodoroCount });\r\n\r\n  handlePomodoroAssigned = () => {\r\n    if (this.state.pendingPomodoro) this.setState({ pendingPomodoro: false });\r\n  };\r\n\r\n  handleInfoModalToggle = () =>\r\n    this.setState({ infoModalOpen: !this.state.infoModalOpen });\r\n\r\n  handleSettingsModalToggle = () =>\r\n    this.setState({ settingsModalOpen: !this.state.settingsModalOpen });\r\n\r\n  handleOvertime = sec => {\r\n    const overtime = { ...this.state.overtime };\r\n    const { currentSession } = this.state;\r\n\r\n    if (currentSession === Session.POMODORO) overtime.pomodori += sec;\r\n    else overtime.breaks += sec;\r\n\r\n    this.setState({ overtime });\r\n  }\r\n\r\n  mapOvertimeToString = ({ pomodori, breaks }) => ({\r\n    pomodori: Time.secToMinSecString(pomodori),\r\n    breaks: Time.secToMinSecString(breaks)\r\n  });\r\n\r\n  render() {\r\n    return (\r\n      <ThemeContext.Provider value={this.state}>\r\n        {this.renderContent()}\r\n      </ThemeContext.Provider>\r\n    );\r\n  }\r\n\r\n  renderContent() {\r\n    const {\r\n      pomodoroCount,\r\n      currentSession,\r\n      pendingPomodoro,\r\n      isWorking,\r\n      taskCount,\r\n      infoModalOpen,\r\n      settingsModalOpen,\r\n      initCompleted,\r\n      overtime,\r\n      theme\r\n    } = this.state;\r\n\r\n    const isSessionPomodoro = currentSession === Session.POMODORO;\r\n    const styles = {\r\n      ...this.styles,\r\n      background: theme.background,\r\n      color: theme.foreground\r\n    };\r\n\r\n    return (\r\n      <div style={styles}>\r\n        <AppNavbar\r\n          title=\"Pomodori Story\"\r\n          isBreakTime={!isSessionPomodoro}\r\n          isWorking={isWorking}\r\n          onInfoClick={this.handleInfoModalToggle}\r\n          onSettingsClick={this.handleSettingsModalToggle}\r\n        />\r\n        <InfoModal\r\n          isOpen={infoModalOpen}\r\n          onToggle={this.handleInfoModalToggle}\r\n        />\r\n        {initCompleted && (\r\n          <SettingsModal\r\n            isOpen={settingsModalOpen}\r\n            onToggle={this.handleSettingsModalToggle}\r\n          />\r\n        )}\r\n        <Container>\r\n          <Row>\r\n            <LeftToBottomCol>\r\n              <Tasks\r\n                pendingPomodoro={pendingPomodoro}\r\n                onTasksChanged={this.handleTaskCountChange}\r\n                onPomodoroAssigned={this.handlePomodoroAssigned}\r\n                DEBUG_se_hack={this.handleSessionEnd}\r\n              />\r\n            </LeftToBottomCol>\r\n            <RightToTopCol>\r\n              <SessionButtons\r\n                currentSession={currentSession}\r\n                onButtonClick={this.handleSetSession}\r\n              />\r\n              <Timer\r\n                currentSessionValue={currentSession}\r\n                isPomodoro={isSessionPomodoro}\r\n                startOnChange={initCompleted}\r\n                onTimerStart={this.handleTimerStart}\r\n                onTimerStop={this.handleTimerStop}\r\n                onTimerDone={this.handleSessionEnd}\r\n                onOvertimeDone={this.handleOvertime}\r\n              />\r\n              <Summary\r\n                taskCount={taskCount}\r\n                pomodoroCount={pomodoroCount}\r\n                overtime={this.mapOvertimeToString(overtime)}\r\n                showOvertime={Session.OVERTIME}\r\n              />\r\n            </RightToTopCol>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}