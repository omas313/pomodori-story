{"version":3,"sources":["components/appNavbar.jsx","components/infoModal.jsx","components/rangeInput.jsx","models/session.js","services/settingsService.js","components/settingsModal.jsx","components/leftToBottomCol.jsx","components/rightToTopCol.jsx","components/sessionButtons.jsx","components/summary.jsx","components/taskInput.jsx","components/taskButtons.jsx","types/index.js","components/taskComponent.jsx","components/taskList.jsx","services/taskService.js","models/task.js","components/tasks.jsx","models/time.js","components/sound.jsx","models/title.js","components/timer.jsx","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","handleToggle","_this","setState","this","_this$props","props","title","isBreakTime","isWorking","onInfoClick","onSettingsClick","classes","concat","react_default","a","createElement","reactstrap_es","dark","expand","className","href","onClick","navbar","id","Component","InfoModal","_ref","onToggle","toggle","target","rel","RangeInput","value","handleChange","input","currentTarget","name","min","max","onChange","Number","default","_this$props2","label","for","type","defaultProps","Session","POMODORO","SHORT_BREAK","LONG_BREAK","TIMER_MIN","TIMER_MAX","validTimers","timers","Object","keys","some","k","setTimers","pomodoro","shortBreak","longBreak","getTimers","getBreakduration","pomodori","getTextFromTime","time","timersKeys","settingsService","values","map","localStorage","getItem","saveTimers","setItem","SettingsModal","handleTimerChange","objectSpread","prevProps","prevState","save","rangeInput","color","LeftToBottomCol","children","lg","size","order","xs","RightToTopCol","SessionButtons","isActive","sess","currentSession","getButtonClasses","onButtonClick","src","alt","Summary","taskCount","pomodoroCount","TaskInput","text","handleKeyDown","_ref2","key","handleSubmit","trim","onSubmit","_this2","placeholder","onKeyDown","onBlur","autoFocus","TaskButtons","shape","_id","string","isRequired","number","task","onDelete","onEditClick","Fragment","outline","newName","isEditing","renderSubmitEditButton","renderActionButtons","TaskComponent","handleEditClick","handleEditSubmit","onEdit","getBadgeColor","_this$state","onSetActive","taskClasses","taskInput","md","pill","taskButtons","TaskList","taskId","currentTask","tasks","onSetActiveTask","flush","length","taskComponent","taskService","getAll","JSON","parse","stringify","Task","classCallCheck","addPomodoro","getDefaultTask","Tasks","handleSetActiveTask","handleNewTask","arguments","undefined","DEBUG_se_hack","toConsumableArray","Math","random","push","handleDeleteTask","oldTasks","newTask","updates","splice","indexOf","handleEditTask","_this$state2","index","findIndex","t","initTasks","onTasksChanged","pendingPomodoro","addPomodoroToCurrentTask","reduce","curr","getTotalPomodori","_this$state3","onPomodoroAssigned","_this$state4","taskList","Time","sec","m","s","Sound","volume","autoPlay","Title","session","isPaused","update","document","setSession","setTime","Timer","running","timer","toString","handleSecondPassed","nextTime","timerFinished","handleTimerToggle","_callee","regenerator_default","wrap","_context","prev","next","stopTimer","startTimer","stop","onNewSession","currentSessionValue","startOnChange","onTimerDone","playSound","onTimerStop","clearInterval","onTimerStart","setInterval","setTimeout","isPomodoro","sound","propTypes","PropTypes","bool","func","App","infoModalOpen","settingsModalOpen","timersInitialized","handleSessionEnd","onPomodoroFinished","handleSetSession","handleTimerStart","handleTimerStop","handleTaskCountChange","handlePomodoroAssigned","handleInfoModalToggle","handleSettingsModalToggle","initTimers","initTitle","isSessionPomodoro","appNavbar","infoModal","settingsModal","leftToBottomCol","components_tasks","rightToTopCol","sessionButtons","components_timer","summary","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73d57b60.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  handleToggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { isOpen } = this.state;\r\n    const {\r\n      title,\r\n      isBreakTime,\r\n      isWorking,\r\n      onInfoClick,\r\n      onSettingsClick\r\n    } = this.props;\r\n\r\n    const classes = `${isBreakTime ? 'break-vibe' : ''} ${\r\n      isWorking ? 'animate' : ''\r\n    }`;\r\n\r\n    return (\r\n      <div>\r\n        <Navbar dark expand=\"md\" className={classes}>\r\n          <NavbarBrand href=\"/\">{title}</NavbarBrand>\r\n          <NavbarToggler onClick={this.handleToggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink\r\n                  id=\"info-nav-link\"\r\n                  className=\"clickable\"\r\n                  onClick={onInfoClick}\r\n                >\r\n                  Info\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  id=\"settings-nav-link\"\r\n                  className=\"clickable\"\r\n                  onClick={onSettingsClick}\r\n                >\r\n                  Settings\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// TODO: make prop names clearer\r\nAppNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  isBreakTime: PropTypes.bool.isRequired,\r\n  isWorking: PropTypes.bool.isRequired,\r\n  onInfoClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\n\r\nconst InfoModal = ({ isOpen, onToggle }) => {\r\n  return (\r\n    <Modal isOpen={isOpen} toggle={onToggle} className=\"info-modal\">\r\n      <ModalHeader toggle={onToggle}>Info</ModalHeader>\r\n      <ModalBody>\r\n        <h5>Pomodoro, pomodori?</h5>\r\n        <p>It is the Italian word for tomato, and the plural is pomodori.</p>\r\n\r\n        <h5>What is this website?</h5>\r\n        <p>\r\n          It is a timer web application I developed to implement the Pomodoro\r\n          Technique.\r\n        </p>\r\n\r\n        <h5>The Pomodoro Technique</h5>\r\n        <p>\r\n          It is a time-management and productivity booster technique created by\r\n          Francesco Cirillo.\r\n          <br />\r\n          It can help size up tasks and maintain focus throughout your work by\r\n          diving it into time chunks.\r\n          <br />\r\n          You can read more about it{' '}\r\n          <a\r\n            href=\"https://francescocirillo.com/pages/pomodoro-technique\"\r\n            className=\"link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            here\r\n          </a>\r\n          .\r\n        </p>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nInfoModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default InfoModal;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Input, FormGroup, Label } from 'reactstrap';\r\n\r\nclass RangeInput extends Component {\r\n  state = {\r\n    value: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ value: this.props.default });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const { name, min, max, onChange } = this.props;\r\n\r\n    if (input.value < min || input.value > max) return;\r\n\r\n    onChange(name, Number(input.value));\r\n    this.setState({ value: input.value });\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const { name, label, min, max } = this.props;\r\n\r\n    return (\r\n      <FormGroup>\r\n        <Row>\r\n          <Col>\r\n            <Label for={name}>{label}</Label>\r\n          </Col>\r\n          <Col>\r\n            <Input\r\n              type=\"number\"\r\n              min={min}\r\n              max={max}\r\n              name={name}\r\n              value={value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nRangeInput.propTypes = {\r\n  name: PropTypes.string,\r\n  value: PropTypes.number,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nRangeInput.defaultProps = {\r\n  name: '',\r\n  value: 0,\r\n  onChange: () => null\r\n};\r\n\r\nexport default RangeInput;\r\n","export default class Session {\r\n  static POMODORO = 25;\r\n  static SHORT_BREAK = 5;\r\n  static LONG_BREAK = 10;\r\n  static TIMER_MIN = 1;\r\n  static TIMER_MAX = 120;\r\n\r\n  static validTimers = timers =>\r\n    !Object.keys(timers).some(\r\n      k => timers[k] < Session.TIMER_MIN || timers[k] > Session.TIMER_MAX\r\n    );\r\n\r\n  static setTimers = timers => {\r\n    if (timers.pomodoro !== 0) Session.POMODORO = timers.pomodoro;\r\n    if (timers.shortBreak !== 0) Session.SHORT_BREAK = timers.shortBreak;\r\n    if (timers.longBreak !== 0) Session.LONG_BREAK = timers.longBreak;\r\n  };\r\n\r\n  static getTimers = () => {\r\n    return {\r\n      pomodoro: Session.POMODORO,\r\n      shortBreak: Session.SHORT_BREAK,\r\n      longBreak: Session.LONG_BREAK\r\n    };\r\n  };\r\n\r\n  static getBreakduration = pomodori =>\r\n    pomodori > 0 && pomodori % 4 === 0\r\n      ? Session.LONG_BREAK\r\n      : Session.SHORT_BREAK;\r\n\r\n  static getTextFromTime = time => {\r\n    switch (time) {\r\n      case Session.POMODORO:\r\n        return 'Pomodoro';\r\n\r\n      case Session.SHORT_BREAK:\r\n        return 'Break (S)';\r\n\r\n      case Session.LONG_BREAK:\r\n        return 'Break (L)';\r\n\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n}\r\n","const timersKeys = {\r\n  pomodoro: 'pomodoro',\r\n  shortBreak: 'sb',\r\n  longBreak: 'lb'\r\n};\r\n\r\nfunction getTimers() {\r\n  const values = Object.keys(timersKeys).map(k =>\r\n    Number(localStorage.getItem(timersKeys[k]))\r\n  );\r\n  return {\r\n    pomodoro: values[0],\r\n    shortBreak: values[1],\r\n    longBreak: values[2]\r\n  };\r\n}\r\n\r\nfunction saveTimers(timers) {\r\n  localStorage.setItem(timersKeys.pomodoro, timers.pomodoro);\r\n  localStorage.setItem(timersKeys.shortBreak, timers.shortBreak);\r\n  localStorage.setItem(timersKeys.longBreak, timers.longBreak);\r\n}\r\n\r\nexport default {\r\n  getTimers,\r\n  saveTimers\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody, Button } from 'reactstrap';\r\nimport RangeInput from './rangeInput';\r\nimport Session from './../models/session';\r\nimport settingsService from '../services/settingsService';\r\n\r\nclass SettingsModal extends Component {\r\n  state = {\r\n    timers: {\r\n      pomodoro: 0,\r\n      shortBreak: 0,\r\n      longBreak: 0\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ timers: Session.getTimers() });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.isOpen && !this.props.isOpen) this.save();\r\n  }\r\n\r\n  handleTimerChange = (name, value) => {\r\n    const timers = { ...this.state.timers };\r\n    timers[name] = value;\r\n    this.setState({ timers });\r\n  };\r\n\r\n  save() {\r\n    const { timers } = this.state;\r\n\r\n    if (!Session.validTimers(timers)) return;\r\n\r\n    Session.setTimers(timers);\r\n    settingsService.saveTimers(timers);\r\n  }\r\n\r\n  render() {\r\n    const { timers } = this.state;\r\n    const { isOpen, onToggle } = this.props;\r\n\r\n    return (\r\n      <Modal isOpen={isOpen} toggle={onToggle} className=\"settings-modal\">\r\n        <ModalHeader toggle={onToggle}>Settings</ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"mb-3\">\r\n            <strong>Timer Durations</strong>\r\n          </div>\r\n          <RangeInput\r\n            name=\"pomodoro\"\r\n            label=\"Pomodoro\"\r\n            min={Session.TIMER_MIN}\r\n            max={Session.TIMER_MAX}\r\n            default={timers.pomodoro}\r\n            onChange={this.handleTimerChange}\r\n          />\r\n          <RangeInput\r\n            name=\"shortBreak\"\r\n            label=\"Short Break\"\r\n            min={Session.TIMER_MIN}\r\n            max={Session.TIMER_MAX}\r\n            default={timers.shortBreak}\r\n            onChange={this.handleTimerChange}\r\n          />\r\n          <RangeInput\r\n            name=\"longBreak\"\r\n            label=\"Long Break\"\r\n            min={Session.TIMER_MIN}\r\n            max={Session.TIMER_MAX}\r\n            default={timers.longBreak}\r\n            onChange={this.handleTimerChange}\r\n          />\r\n          <div className=\"settings-submit-button-container\">\r\n            <Button\r\n              id=\"settings-submit-button\"\r\n              className=\"action-button\"\r\n              color=\"danger\"\r\n              onClick={onToggle}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </ModalBody>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nSettingsModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SettingsModal;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst LeftToBottomCol = ({ children }) => (\r\n  <Col\r\n    lg={{ size: 8, order: 1 }}\r\n    xs={{ size: 12, order: 2 }}\r\n    className=\"left-to-bottom-column\"\r\n  >\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default LeftToBottomCol;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst RightToTopCol = ({ children }) => (\r\n  <Col lg={{ size: 4, order: 2 }} xs={{ size: 12, order: 1 }}>\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default RightToTopCol;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport Session from '../models/session';\r\n\r\nclass SessionButtons extends Component {\r\n  isActive = sess => this.props.currentSession === sess;\r\n\r\n  getButtonClasses = sess => {\r\n    const pomodoro = sess === Session.POMODORO;\r\n\r\n    let classes = pomodoro ? 'pomodoro-button' : 'break-button';\r\n    if (this.isActive(sess)) classes += pomodoro ? ' working' : ' break';\r\n\r\n    return classes;\r\n  };\r\n\r\n  render() {\r\n    const { onButtonClick } = this.props;\r\n\r\n    return (\r\n      <div className=\"session-buttons\">\r\n        <Button\r\n          id=\"pomodoro-session-button\"\r\n          className={this.getButtonClasses(Session.POMODORO)}\r\n          onClick={() => onButtonClick(Session.POMODORO)}\r\n        >\r\n          <img\r\n            src=\"./img/pomodoro.png\"\r\n            alt=\"pomodoro\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n        <Button\r\n          id=\"short-break-session-button\"\r\n          className={this.getButtonClasses(Session.SHORT_BREAK)}\r\n          onClick={() => onButtonClick(Session.SHORT_BREAK)}\r\n        >\r\n          <img\r\n            src=\"./img/time-5.png\"\r\n            alt=\"Short break\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n        <Button\r\n          id=\"long-break-session-button\"\r\n          className={this.getButtonClasses(Session.LONG_BREAK)}\r\n          onClick={() => onButtonClick(Session.LONG_BREAK)}\r\n        >\r\n          <img\r\n            src=\"./img/time-10.png\"\r\n            alt=\"Long break\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSessionButtons.propTypes = {\r\n  onButtonClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SessionButtons;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nconst Summary = ({ taskCount, pomodoroCount }) => {\r\n  return (\r\n    <Row className=\"summary\">\r\n      <Col className=\"text-center\">\r\n        <p className=\"text-bold\">Tasks</p>\r\n        <p id=\"summary-task-count\">{taskCount}</p>\r\n      </Col>\r\n      <Col className=\"text-center\">\r\n        <p className=\"text-bold\">Pomodori</p>\r\n        <p id=\"summary-pomodoro-count\">{pomodoroCount}</p>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nSummary.propTypes = {\r\n  taskCount: PropTypes.number.isRequired,\r\n  pomodoroCount: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Summary;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, FormGroup } from 'reactstrap';\r\n\r\nclass TaskInput extends Component {\r\n  state = {\r\n    text: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ text: this.props.text });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    this.props.onChange(input.value);\r\n    this.setState({ text: input.value });\r\n  };\r\n\r\n  handleKeyDown = ({ key }) => {\r\n    const { text } = this.state;\r\n    if (key !== 'Enter') return;\r\n\r\n    this.handleSubmit(text);\r\n  };\r\n\r\n  handleSubmit = text => {\r\n    if (!text.trim()) return;\r\n\r\n    const { onSubmit } = this.props;\r\n\r\n    onSubmit(text);\r\n    this.setState({ text: '' });\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    const { placeholder } = this.props;\r\n\r\n    return (\r\n      <FormGroup>\r\n        <Input\r\n          name=\"task-input\"\r\n          placeholder={placeholder}\r\n          value={text}\r\n          onChange={this.handleChange}\r\n          onKeyDown={this.handleKeyDown}\r\n          onBlur={() => this.handleSubmit(text)}\r\n          autoFocus\r\n        />\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskInput.propTypes = {\r\n  text: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nTaskInput.defaultProps = {\r\n  text: '',\r\n  placeholder: '',\r\n  onChange: () => null\r\n};\r\n\r\nexport default TaskInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport { taskType } from './../types/index';\r\n\r\nclass TaskButtons extends Component {\r\n  renderActionButtons() {\r\n    const { task, onDelete, onEditClick } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          id=\"task-edit-button\"\r\n          className=\"action-button\"\r\n          size=\"sm\"\r\n          color=\"primary\"\r\n          outline\r\n          onClick={onEditClick}\r\n        >\r\n          <img src=\"./img/edit.svg\" alt=\"Edit\" />\r\n        </Button>\r\n        <Button\r\n          id=\"task-delete-button\"\r\n          className=\"action-button\"\r\n          size=\"sm\"\r\n          color=\"primary\"\r\n          outline\r\n          onClick={() => onDelete(task)}\r\n        >\r\n          <img src=\"./img/delete.svg\" alt=\"Delete\" />\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  renderSubmitEditButton() {\r\n    const { newName, onSubmit } = this.props;\r\n\r\n    return (\r\n      <Button\r\n        id=\"task-submit-edit-button\"\r\n        className=\"action-button\"\r\n        size=\"sm\"\r\n        color=\"primary\"\r\n        outline\r\n        onClick={() => onSubmit(newName)}\r\n      >\r\n        <img src=\"./img/check-mark.svg\" alt=\"Edit\" />\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isEditing } = this.props;\r\n    return isEditing\r\n      ? this.renderSubmitEditButton()\r\n      : this.renderActionButtons();\r\n  }\r\n}\r\n\r\nTaskButtons.propTypes = {\r\n  task: taskType,\r\n  newName: PropTypes.string.isRequired,\r\n  isEditing: PropTypes.bool.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEditClick: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskButtons;\r\n","import { shape, string, number } from 'prop-types';\r\n\r\nexport const taskType = shape({\r\n  _id: string.isRequired,\r\n  name: string.isRequired,\r\n  pomodori: number.isRequired\r\n});\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, ListGroupItem, Badge } from 'reactstrap';\r\nimport TaskInput from './taskInput';\r\nimport TaskButtons from './taskButtons';\r\nimport { taskType } from '../types/index';\r\n\r\nclass TaskComponent extends Component {\r\n  state = {\r\n    isEditing: false,\r\n    newName: ''\r\n  };\r\n\r\n  handleEditClick = () => {\r\n    const { isEditing } = this.state;\r\n    this.setState({ isEditing: !isEditing });\r\n  };\r\n\r\n  handleEditSubmit = name => {\r\n    const { task, onEdit } = this.props;\r\n    onEdit(task._id, name);\r\n    this.setState({ isEditing: false });\r\n  };\r\n\r\n  handleChange = newName => {\r\n    this.setState({ newName });\r\n  };\r\n\r\n  getBadgeColor = () =>\r\n    this.props.task.pomodori === 0 ? 'secondary' : 'primary';\r\n\r\n  render() {\r\n    const { isEditing, newName } = this.state;\r\n    const { task, isActive, onSetActive, onDelete } = this.props;\r\n\r\n    const taskClasses = 'task' + (isActive ? ' active' : '');\r\n\r\n    return (\r\n      <ListGroupItem className={taskClasses}>\r\n        <Row>\r\n          <Col\r\n            className=\"w-100 clickable task-name\"\r\n            onClick={() => onSetActive(task)}\r\n          >\r\n            {isEditing ? (\r\n              <TaskInput\r\n                text={task.name}\r\n                onChange={this.handleChange}\r\n                onSubmit={this.handleEditSubmit}\r\n              />\r\n            ) : (\r\n              task.name\r\n            )}\r\n          </Col>\r\n          <Col md=\"2\" xs=\"1\">\r\n            <Badge color={this.getBadgeColor()} pill>\r\n              {task.pomodori}\r\n            </Badge>\r\n          </Col>\r\n          <Col md=\"3\" xs=\"3\" className=\"text-right action-buttons\">\r\n            <TaskButtons\r\n              task={task}\r\n              newName={newName}\r\n              isEditing={isEditing}\r\n              onSubmit={this.handleEditSubmit}\r\n              onEditClick={this.handleEditClick}\r\n              onDelete={onDelete}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </ListGroupItem>\r\n    );\r\n  }\r\n}\r\n\r\nTaskComponent.propTypes = {\r\n  task: taskType.isRequired,\r\n  isActive: PropTypes.bool,\r\n  onSetActive: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskComponent;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ListGroup } from 'reactstrap';\r\nimport TaskComponent from './taskComponent';\r\nimport { taskType } from '../types';\r\n\r\nclass TaskList extends Component {\r\n  isActive(taskId) {\r\n    const { currentTask } = this.props;\r\n    return currentTask && currentTask._id === taskId;\r\n  }\r\n\r\n  render() {\r\n    const { tasks, onSetActiveTask, onDelete, onEdit } = this.props;\r\n\r\n    return (\r\n      <ListGroup flush>\r\n        {tasks.length === 0 && <p>Add a task and start working!</p>}\r\n        {tasks &&\r\n          tasks.map(task => (\r\n            <TaskComponent\r\n              key={task._id}\r\n              task={task}\r\n              isActive={this.isActive(task._id)}\r\n              onSetActive={onSetActiveTask}\r\n              onDelete={onDelete}\r\n              onEdit={onEdit}\r\n            />\r\n          ))}\r\n      </ListGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.arrayOf(taskType),\r\n  currentTask: taskType,\r\n  onSetActiveTask: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskList;\r\n","const key = 'tasks';\r\n\r\nfunction getAll() {\r\n  return JSON.parse(localStorage.getItem(key));\r\n}\r\n\r\nfunction save(tasks) {\r\n  return localStorage.setItem(key, JSON.stringify(tasks));\r\n}\r\n\r\nexport default { getAll, save };\r\n","export default class Task {\r\n  constructor(id, name, pomodori) {\r\n    this._id = id;\r\n    this.name = name;\r\n    this.pomodori = pomodori;\r\n  }\r\n\r\n  addPomodoro = () => this.pomodori++;\r\n\r\n  static getDefaultTask = () => new Task('1', 'Untitled task', 0);\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskInput from './taskInput';\r\nimport TaskList from './taskList';\r\nimport taskService from '../services/taskService';\r\nimport Task from '../models/task';\r\n\r\nclass Tasks extends Component {\r\n  state = {\r\n    tasks: [],\r\n    currentTask: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initTasks();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.tasks !== this.state.tasks) this.onTasksChanged();\r\n\r\n    if (!prevProps.pendingPomodoro && this.props.pendingPomodoro)\r\n      this.addPomodoroToCurrentTask();\r\n  }\r\n\r\n  initTasks() {\r\n    let tasks = taskService.getAll();\r\n    if (!tasks || tasks.length === 0) tasks = [Task.getDefaultTask()];\r\n\r\n    this.setState({ tasks, currentTask: tasks[0] });\r\n  }\r\n\r\n  getTotalPomodori() {\r\n    const { tasks } = this.state;\r\n    return tasks.length === 0\r\n      ? 0\r\n      : tasks.reduce((t, curr) => t + curr.pomodori, 0);\r\n  }\r\n\r\n  onTasksChanged() {\r\n    const { tasks } = this.state;\r\n    const { onTasksChanged } = this.props;\r\n\r\n    onTasksChanged(tasks.length, this.getTotalPomodori());\r\n    taskService.save(tasks);\r\n  }\r\n\r\n  addPomodoroToCurrentTask() {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n    const { onPomodoroAssigned } = this.props;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.indexOf(currentTask);\r\n    const task = new Task(\r\n      tasks[index]._id,\r\n      tasks[index].name,\r\n      tasks[index].pomodori + 1\r\n    );\r\n    tasks[index] = task;\r\n\r\n    this.setState({\r\n      tasks,\r\n      currentTask: task\r\n    });\r\n    onPomodoroAssigned();\r\n  }\r\n\r\n  handleSetActiveTask = task => {\r\n    this.setState({ currentTask: task });\r\n  };\r\n\r\n  handleNewTask = (name, pomodori = 0) => {\r\n    if (name === '>>es') return this.props.DEBUG_se_hack();\r\n\r\n    const tasks = [...this.state.tasks];\r\n    const task = new Task(\r\n      `${name.length}${Math.random() * 1000000}`,\r\n      name.trim(),\r\n      pomodori\r\n    );\r\n    tasks.push(task);\r\n\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  handleDeleteTask = task => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    if (oldTasks.length <= 1) {\r\n      const newTask = Task.getDefaultTask();\r\n      return this.setState({ tasks: [newTask], currentTask: newTask });\r\n    }\r\n\r\n    let tasks = [...oldTasks];\r\n    const updates = {};\r\n\r\n    tasks.splice(tasks.indexOf(task), 1);\r\n\r\n    updates.tasks = tasks;\r\n    if (!currentTask || task._id === currentTask._id || tasks.length === 1)\r\n      updates.currentTask = tasks[0];\r\n\r\n    this.setState(updates);\r\n  };\r\n\r\n  handleEditTask = (id, name) => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.findIndex(t => t._id === id);\r\n    const task = new Task(tasks[index]._id, name.trim(), tasks[index].pomodori);\r\n    tasks[index] = task;\r\n\r\n    const updates = { tasks };\r\n    if (task._id === currentTask._id) updates.currentTask = task;\r\n    this.setState(updates);\r\n  };\r\n\r\n  render() {\r\n    const { tasks, currentTask } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <TaskInput\r\n          placeholder=\"Enter task here...\"\r\n          onSubmit={this.handleNewTask}\r\n        />\r\n        <TaskList\r\n          tasks={tasks}\r\n          currentTask={currentTask}\r\n          onSetActiveTask={this.handleSetActiveTask}\r\n          onEdit={this.handleEditTask}\r\n          onDelete={this.handleDeleteTask}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTasks.propTypes = {\r\n  pendingPomodoro: PropTypes.bool.isRequired,\r\n  onTasksChanged: PropTypes.func.isRequired,\r\n  onPomodoroAssigned: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Tasks;\r\n","class Time {\r\n  constructor(min, sec) {\r\n    this.min = min;\r\n    this.sec = sec;\r\n  }\r\n\r\n  toString() {\r\n    const m = this.min < 10 ? `0${this.min}` : this.min;\r\n    const s = this.sec < 10 ? `0${this.sec}` : this.sec;\r\n    return `${m} : ${s}`;\r\n  }\r\n}\r\n\r\nexport default Time;\r\n","import React from 'react';\r\n\r\nconst Sound = () => {\r\n  return (\r\n    <audio volume=\"0.5\" src=\"./sound/alert.mp3\" autoPlay>\r\n      It looks like your browser doesn't support audio playback through html...\r\n    </audio>\r\n  );\r\n};\r\n\r\nexport default Sound;\r\n","export default class Title {\r\n  static value = '';\r\n\r\n  static session = '';\r\n  static time = '';\r\n  static isPaused = false;\r\n\r\n  static update = () =>\r\n    (document.title =\r\n      `${Title.session} - ${Title.time}` + (Title.isPaused ? ` - PAUSED` : ''));\r\n\r\n  static setSession = session => {\r\n    Title.session = session;\r\n    Title.update();\r\n  };\r\n\r\n  static setTime = time => {\r\n    Title.time = time;\r\n    Title.update();\r\n  };\r\n\r\n  static setState = state => {\r\n    Title.isPaused = state;\r\n    Title.update();\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Time from '../models/time';\r\nimport Sound from './sound';\r\nimport Title from './../models/title';\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    running: false,\r\n    time: new Time(0, 0),\r\n    timer: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setTime(this.props.currentSessionValue, 0);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.currentSessionValue !== this.props.currentSessionValue)\r\n      this.onNewSession();\r\n  }\r\n\r\n  setTime = (min, sec) =>\r\n    this.setState({ time: new Time(min, sec) }, () =>\r\n      Title.setTime(this.state.time.toString())\r\n    );\r\n\r\n  handleSecondPassed = () => {\r\n    const { time } = this.state;\r\n    const nextTime = { ...time };\r\n\r\n    if (time.sec === 0 && time.min === 0) return this.timerFinished();\r\n\r\n    if (time.sec === 0) {\r\n      nextTime.min = time.min - 1;\r\n      nextTime.sec = 59;\r\n    } else {\r\n      nextTime.sec = time.sec - 1;\r\n    }\r\n\r\n    this.setTime(nextTime.min, nextTime.sec);\r\n  };\r\n\r\n  handleTimerToggle = async () => {\r\n    const { running } = this.state;\r\n\r\n    if (running) await this.stopTimer();\r\n    else await this.startTimer();\r\n\r\n    Title.setState(this.isPaused());\r\n  };\r\n\r\n  async stopTimer() {\r\n    const { timer } = this.state;\r\n    const { onTimerStop } = this.props;\r\n\r\n    clearInterval(timer);\r\n    await this.setState({ timer: null, running: false });\r\n    onTimerStop();\r\n  }\r\n\r\n  async startTimer() {\r\n    const { running } = this.state;\r\n    const { onTimerStart } = this.props;\r\n\r\n    if (running) await this.stopTimer();\r\n\r\n    await this.setState({\r\n      timer: setInterval(this.handleSecondPassed, 1000),\r\n      running: true\r\n    });\r\n    onTimerStart();\r\n  }\r\n\r\n  onNewSession = () => {\r\n    const { currentSessionValue, startOnChange } = this.props;\r\n\r\n    this.setTime(currentSessionValue, 0);\r\n    if (startOnChange) this.startTimer();\r\n  };\r\n\r\n  timerFinished = () => {\r\n    const { onTimerDone } = this.props;\r\n\r\n    this.stopTimer();\r\n    this.playSound();\r\n    onTimerDone();\r\n  };\r\n\r\n  playSound() {\r\n    this.setState({ playSound: true }, () => {\r\n      setTimeout(() => this.setState({ playSound: false }), 5000);\r\n    });\r\n  }\r\n\r\n  isPaused = () => {\r\n    const { time, timer } = this.state;\r\n    const { currentSessionValue } = this.props;\r\n\r\n    return (\r\n      !timer &&\r\n      time.min !== currentSessionValue &&\r\n      (time.min !== 0 && time.sec !== 0)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { time, playSound } = this.state;\r\n    const { isPomodoro } = this.props;\r\n\r\n    let classes = 'time clickable';\r\n    const blink = this.isPaused() ? ' blink' : '',\r\n      color = isPomodoro ? ' working' : ' break';\r\n    classes += blink + color;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h3 id=\"time\" className={classes} onClick={this.handleTimerToggle}>\r\n          {time.toString()}\r\n        </h3>\r\n        {playSound && <Sound />}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTime.propTypes = {\r\n  currentSessionValue: PropTypes.number.isRequired,\r\n  isPomodoro: PropTypes.bool.isRequired,\r\n  startOnChange: PropTypes.bool.isRequired,\r\n  onTimerStart: PropTypes.func.isRequired,\r\n  onTimerStop: PropTypes.func.isRequired,\r\n  onTimerDone: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row } from 'reactstrap';\r\nimport AppNavbar from './components/appNavbar';\r\nimport InfoModal from './components/infoModal';\r\nimport SettingsModal from './components/settingsModal';\r\nimport LeftToBottomCol from './components/leftToBottomCol';\r\nimport RightToTopCol from './components/rightToTopCol';\r\nimport SessionButtons from './components/sessionButtons';\r\nimport Summary from './components/summary';\r\nimport Tasks from './components/tasks';\r\nimport Timer from './components/timer';\r\nimport Session from './models/session';\r\nimport './App.css';\r\nimport settingsService from './services/settingsService';\r\nimport Title from './models/title';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentSession: 0,\r\n    taskCount: 0,\r\n    pomodoroCount: 0,\r\n    pendingPomodoro: false,\r\n    isWorking: false,\r\n    infoModalOpen: false,\r\n    settingsModalOpen: false,\r\n    timersInitialized: false\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.initTimers();\r\n    this.initTitle();\r\n  }\r\n\r\n  async initTimers() {\r\n    const timers = settingsService.getTimers();\r\n    Session.setTimers(timers);\r\n    await this.setState({ currentSession: Session.POMODORO }, () =>\r\n      this.setState({ timersInitialized: true })\r\n    );\r\n  }\r\n\r\n  initTitle() {\r\n    const { currentSession } = this.state;\r\n    Title.setSession(Session.getTextFromTime(currentSession));\r\n  }\r\n\r\n  onPomodoroFinished() {\r\n    const { pomodoroCount: oldPomodoroCount } = this.state;\r\n\r\n    const pomodoroCount = oldPomodoroCount + 1;\r\n\r\n    this.setState({\r\n      pomodoroCount,\r\n      pendingPomodoro: true\r\n    });\r\n    this.handleSetSession(Session.getBreakduration(pomodoroCount));\r\n  }\r\n\r\n  handleSessionEnd = () => {\r\n    const { currentSession } = this.state;\r\n\r\n    if (currentSession === Session.POMODORO) this.onPomodoroFinished();\r\n    else this.handleSetSession(Session.POMODORO);\r\n  };\r\n\r\n  handleSetSession = session =>\r\n    this.setState({ currentSession: session }, () =>\r\n      Title.setSession(Session.getTextFromTime(this.state.currentSession))\r\n    );\r\n\r\n  handleTimerStart = () => {\r\n    this.setState({\r\n      isWorking: this.state.currentSession === Session.POMODORO\r\n    });\r\n  };\r\n\r\n  handleTimerStop = () => this.setState({ isWorking: false });\r\n\r\n  handleTaskCountChange = (taskCount, pomodoroCount) =>\r\n    this.setState({ taskCount, pomodoroCount });\r\n\r\n  handlePomodoroAssigned = () => {\r\n    if (this.state.pendingPomodoro) this.setState({ pendingPomodoro: false });\r\n  };\r\n\r\n  handleInfoModalToggle = () =>\r\n    this.setState({ infoModalOpen: !this.state.infoModalOpen });\r\n\r\n  handleSettingsModalToggle = () =>\r\n    this.setState({ settingsModalOpen: !this.state.settingsModalOpen });\r\n\r\n  render() {\r\n    const {\r\n      pomodoroCount,\r\n      currentSession,\r\n      pendingPomodoro,\r\n      isWorking,\r\n      taskCount,\r\n      infoModalOpen,\r\n      settingsModalOpen,\r\n      timersInitialized\r\n    } = this.state;\r\n\r\n    const isSessionPomodoro = currentSession === Session.POMODORO;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <AppNavbar\r\n          title=\"Pomodori Story\"\r\n          isBreakTime={!isSessionPomodoro}\r\n          isWorking={isWorking}\r\n          onInfoClick={this.handleInfoModalToggle}\r\n          onSettingsClick={this.handleSettingsModalToggle}\r\n        />\r\n        <InfoModal\r\n          isOpen={infoModalOpen}\r\n          onToggle={this.handleInfoModalToggle}\r\n        />\r\n        <SettingsModal\r\n          isOpen={settingsModalOpen}\r\n          onToggle={this.handleSettingsModalToggle}\r\n        />\r\n        <Container>\r\n          <Row>\r\n            <LeftToBottomCol>\r\n              <Tasks\r\n                pendingPomodoro={pendingPomodoro}\r\n                onTasksChanged={this.handleTaskCountChange}\r\n                onPomodoroAssigned={this.handlePomodoroAssigned}\r\n                DEBUG_se_hack={this.handleSessionEnd}\r\n              />\r\n            </LeftToBottomCol>\r\n            <RightToTopCol>\r\n              <SessionButtons\r\n                currentSession={currentSession}\r\n                onButtonClick={this.handleSetSession}\r\n              />\r\n              <Timer\r\n                currentSessionValue={currentSession}\r\n                isPomodoro={isSessionPomodoro}\r\n                startOnChange={timersInitialized}\r\n                onTimerStart={this.handleTimerStart}\r\n                onTimerStop={this.handleTimerStop}\r\n                onTimerDone={this.handleSessionEnd}\r\n              />\r\n              <Summary taskCount={taskCount} pomodoroCount={pomodoroCount} />\r\n            </RightToTopCol>\r\n          </Row>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}