{"version":3,"sources":["components/appNavbar.jsx","components/infoModal.jsx","components/leftToBottomCol.jsx","components/rightToTopCol.jsx","components/sessionButtons.jsx","components/summary.jsx","components/taskInput.jsx","components/taskButtons.jsx","types/index.js","components/taskComponent.jsx","components/taskList.jsx","services/taskService.js","models/task.js","components/tasks.jsx","models/time.js","components/sound.jsx","components/timer.jsx","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","handleToggle","_this","setState","this","_this$props","props","title","isBreakTime","isWorking","onInfoClick","classes","concat","react_default","a","createElement","reactstrap_es","dark","expand","className","href","onClick","navbar","id","Component","InfoModal","_ref","onToggle","toggle","target","rel","LeftToBottomCol","children","lg","size","order","xs","RightToTopCol","SessionButtons","isActive","sess","currentSession","getButtonClasses","pomodoro","session","POMODORO","onButtonClick","src","alt","SHORT_BREAK","LONG_BREAK","Summary","taskCount","pomodoroCount","TaskInput","text","handleChange","input","currentTarget","onChange","value","handleKeyDown","_ref2","key","handleSubmit","trim","onSubmit","_this2","placeholder","name","onKeyDown","onBlur","autoFocus","defaultProps","TaskButtons","shape","_id","string","isRequired","pomodori","number","task","onDelete","onEditClick","Fragment","color","outline","_this$props2","newName","isEditing","renderSubmitEditButton","renderActionButtons","TaskComponent","handleEditClick","handleEditSubmit","onEdit","getBadgeColor","_this$state","onSetActive","taskClasses","taskInput","md","pill","taskButtons","TaskList","taskId","currentTask","tasks","onSetActiveTask","flush","length","map","taskComponent","taskService","getAll","JSON","parse","localStorage","getItem","save","setItem","stringify","Task","Object","classCallCheck","addPomodoro","getDefaultTask","Tasks","handleSetActiveTask","handleNewTask","arguments","undefined","DEBUG_se_hack","toConsumableArray","Math","random","push","handleDeleteTask","oldTasks","updates","splice","indexOf","handleEditTask","_this$state2","index","findIndex","t","initTasks","prevProps","prevState","onTasksChanged","pendingPomodoro","addPomodoroToCurrentTask","reduce","curr","getTotalPomodori","_this$state3","onPomodoroAssigned","_this$state4","taskList","Time","min","sec","m","s","Sound","volume","autoPlay","Timer","running","time","timer","setTime","handleSecondPassed","nextTime","objectSpread","timerFinished","handleTimerToggle","stopTimer","startTimer","onNewSession","currentSessionValue","onTimerDone","playSound","isPaused","onTimerStop","clearInterval","onTimerStart","setInterval","setTimeout","isPomodoro","toString","sound","propTypes","PropTypes","bool","func","Session","App","infoModalOpen","handleSessionEnd","onPomodoroFinished","handleSetSession","handleTimerStart","handleTimerStop","handleTaskCountChange","handlePomodoroAssigned","handleInfoModalToggle","getBreakduration","isSessionPomodoro","appNavbar","infoModal","leftToBottomCol","components_tasks","rightToTopCol","sessionButtons","summary","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5de415ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  handleToggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { isOpen } = this.state;\r\n    const { title, isBreakTime, isWorking, onInfoClick } = this.props;\r\n\r\n    const classes = `${isBreakTime ? 'break-vibe' : ''} ${\r\n      isWorking ? 'animate' : ''\r\n    }`;\r\n\r\n    return (\r\n      <div>\r\n        <Navbar dark expand=\"md\" className={classes}>\r\n          <NavbarBrand href=\"/\">{title}</NavbarBrand>\r\n          <NavbarToggler onClick={this.handleToggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink\r\n                  id=\"info-nav-link\"\r\n                  className=\"clickable\"\r\n                  onClick={onInfoClick}\r\n                >\r\n                  Info\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// TODO: make prop names clearer\r\nAppNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  isBreakTime: PropTypes.bool.isRequired,\r\n  isWorking: PropTypes.bool.isRequired,\r\n  onInfoClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\n\r\nconst InfoModal = ({ isOpen, onToggle }) => {\r\n  return (\r\n    <Modal isOpen={isOpen} toggle={onToggle} className=\"info-modal\">\r\n      <ModalHeader toggle={onToggle}>Info</ModalHeader>\r\n      <ModalBody>\r\n        <h5>Pomodoro, pomodori?</h5>\r\n        <p>It is the Italian word for tomato, and the plural is pomodori.</p>\r\n\r\n        <h5>What is this website?</h5>\r\n        <p>\r\n          It is a timer web application I developed to implement the Pomodoro\r\n          Technique which also includes helpful task tracking.\r\n        </p>\r\n\r\n        <h5>The Pomodoro Technique</h5>\r\n        <p>\r\n          It is a time-management and productivity booster technique created by\r\n          Francesco Cirillo.\r\n          <br />\r\n          It can help size up tasks and maintain focus throughout your work by\r\n          diving it into time chunks.\r\n          <br />\r\n          You can read more about it{' '}\r\n          <a\r\n            href=\"https://francescocirillo.com/pages/pomodoro-technique\"\r\n            className=\"link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            here\r\n          </a>\r\n          .\r\n        </p>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nInfoModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default InfoModal;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst LeftToBottomCol = ({ children }) => (\r\n  <Col\r\n    lg={{ size: 8, order: 1 }}\r\n    xs={{ size: 12, order: 2 }}\r\n    className=\"left-to-bottom-column\"\r\n  >\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default LeftToBottomCol;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst RightToTopCol = ({ children }) => (\r\n  <Col lg={{ size: 4, order: 2 }} xs={{ size: 12, order: 1 }}>\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default RightToTopCol;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\n\r\nclass SessionButtons extends Component {\r\n  isActive = sess => this.props.currentSession === sess;\r\n\r\n  getButtonClasses = sess => {\r\n    const { session } = this.props;\r\n    const pomodoro = sess === session.POMODORO;\r\n\r\n    let classes = pomodoro ? 'pomodoro-button' : 'break-button';\r\n    if (this.isActive(sess)) classes += pomodoro ? ' working' : ' break';\r\n\r\n    return classes;\r\n  };\r\n\r\n  render() {\r\n    const { session, onButtonClick } = this.props;\r\n\r\n    return (\r\n      <div className=\"session-buttons\">\r\n        <Button\r\n          id=\"pomodoro-session-button\"\r\n          className={this.getButtonClasses(session.POMODORO)}\r\n          onClick={() => onButtonClick(session.POMODORO)}\r\n        >\r\n          <img\r\n            src=\"./img/pomodoro.png\"\r\n            alt=\"pomodoro\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n        <Button\r\n          id=\"short-break-session-button\"\r\n          className={this.getButtonClasses(session.SHORT_BREAK)}\r\n          onClick={() => onButtonClick(session.SHORT_BREAK)}\r\n        >\r\n          <img\r\n            src=\"./img/time-5.png\"\r\n            alt=\"Short break\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n        <Button\r\n          id=\"long-break-session-button\"\r\n          className={this.getButtonClasses(session.LONG_BREAK)}\r\n          onClick={() => onButtonClick(session.LONG_BREAK)}\r\n        >\r\n          <img\r\n            src=\"./img/time-10.png\"\r\n            alt=\"Long break\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSessionButtons.propTypes = {\r\n  session: PropTypes.objectOf(PropTypes.number).isRequired,\r\n  onButtonClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SessionButtons;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nconst Summary = ({ taskCount, pomodoroCount }) => {\r\n  return (\r\n    <Row className=\"summary\">\r\n      <Col className=\"text-center\">\r\n        <p className=\"text-bold\">Tasks</p>\r\n        <p id=\"summary-task-count\">{taskCount}</p>\r\n      </Col>\r\n      <Col className=\"text-center\">\r\n        <p className=\"text-bold\">Pomodori</p>\r\n        <p id=\"summary-pomodoro-count\">{pomodoroCount}</p>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nSummary.propTypes = {\r\n  taskCount: PropTypes.number.isRequired,\r\n  pomodoroCount: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Summary;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, FormGroup } from 'reactstrap';\r\n\r\nclass TaskInput extends Component {\r\n  state = {\r\n    text: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ text: this.props.text });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    this.props.onChange(input.value);\r\n    this.setState({ text: input.value });\r\n  };\r\n\r\n  handleKeyDown = ({ key }) => {\r\n    const { text } = this.state;\r\n    if (key !== 'Enter') return;\r\n\r\n    this.handleSubmit(text);\r\n  };\r\n\r\n  handleSubmit = text => {\r\n    if (!text.trim()) return;\r\n\r\n    const { onSubmit } = this.props;\r\n\r\n    onSubmit(text);\r\n    this.setState({ text: '' });\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    const { placeholder } = this.props;\r\n\r\n    return (\r\n      <FormGroup>\r\n        <Input\r\n          name=\"task-input\"\r\n          placeholder={placeholder}\r\n          value={text}\r\n          onChange={this.handleChange}\r\n          onKeyDown={this.handleKeyDown}\r\n          onBlur={() => this.handleSubmit(text)}\r\n          autoFocus\r\n        />\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskInput.propTypes = {\r\n  text: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nTaskInput.defaultProps = {\r\n  text: '',\r\n  placeholder: '',\r\n  onChange: () => null\r\n};\r\n\r\nexport default TaskInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport { taskType } from './../types/index';\r\n\r\nclass TaskButtons extends Component {\r\n  renderActionButtons() {\r\n    const { task, onDelete, onEditClick } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          id=\"task-edit-button\"\r\n          className=\"action-button\"\r\n          size=\"sm\"\r\n          color=\"primary\"\r\n          outline\r\n          onClick={onEditClick}\r\n        >\r\n          <img src=\"./img/edit.svg\" alt=\"Edit\" />\r\n        </Button>\r\n        <Button\r\n          id=\"task-delete-button\"\r\n          className=\"action-button\"\r\n          size=\"sm\"\r\n          color=\"primary\"\r\n          outline\r\n          onClick={() => onDelete(task)}\r\n        >\r\n          <img src=\"./img/delete.svg\" alt=\"Delete\" />\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  renderSubmitEditButton() {\r\n    const { newName, onSubmit } = this.props;\r\n\r\n    return (\r\n      <Button\r\n        id=\"task-submit-edit-button\"\r\n        className=\"action-button\"\r\n        size=\"sm\"\r\n        color=\"primary\"\r\n        outline\r\n        onClick={() => onSubmit(newName)}\r\n      >\r\n        <img src=\"./img/check-mark.svg\" alt=\"Edit\" />\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isEditing } = this.props;\r\n    return isEditing\r\n      ? this.renderSubmitEditButton()\r\n      : this.renderActionButtons();\r\n  }\r\n}\r\n\r\nTaskButtons.propTypes = {\r\n  task: taskType,\r\n  newName: PropTypes.string.isRequired,\r\n  isEditing: PropTypes.bool.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEditClick: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskButtons;\r\n","import { shape, string, number } from 'prop-types';\r\n\r\nexport const taskType = shape({\r\n  _id: string.isRequired,\r\n  name: string.isRequired,\r\n  pomodori: number.isRequired\r\n});\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, ListGroupItem, Badge } from 'reactstrap';\r\nimport TaskInput from './taskInput';\r\nimport TaskButtons from './taskButtons';\r\nimport { taskType } from '../types/index';\r\n\r\nclass TaskComponent extends Component {\r\n  state = {\r\n    isEditing: false,\r\n    newName: ''\r\n  };\r\n\r\n  handleEditClick = () => {\r\n    const { isEditing } = this.state;\r\n    this.setState({ isEditing: !isEditing });\r\n  };\r\n\r\n  handleEditSubmit = name => {\r\n    const { task, onEdit } = this.props;\r\n    onEdit(task._id, name);\r\n    this.setState({ isEditing: false });\r\n  };\r\n\r\n  handleChange = newName => {\r\n    this.setState({ newName });\r\n  };\r\n\r\n  getBadgeColor = () =>\r\n    this.props.task.pomodori === 0 ? 'secondary' : 'primary';\r\n\r\n  render() {\r\n    const { isEditing, newName } = this.state;\r\n    const { task, isActive, onSetActive, onDelete } = this.props;\r\n\r\n    const taskClasses = 'task' + (isActive ? ' active' : '');\r\n\r\n    return (\r\n      <ListGroupItem className={taskClasses}>\r\n        <Row>\r\n          <Col\r\n            className=\"w-100 clickable task-name\"\r\n            onClick={() => onSetActive(task)}\r\n          >\r\n            {isEditing ? (\r\n              <TaskInput\r\n                text={task.name}\r\n                onChange={this.handleChange}\r\n                onSubmit={this.handleEditSubmit}\r\n              />\r\n            ) : (\r\n              task.name\r\n            )}\r\n          </Col>\r\n          <Col md=\"2\" xs=\"1\">\r\n            <Badge color={this.getBadgeColor()} pill>\r\n              {task.pomodori}\r\n            </Badge>\r\n          </Col>\r\n          <Col md=\"3\" xs=\"3\" className=\"text-right action-buttons\">\r\n            <TaskButtons\r\n              task={task}\r\n              newName={newName}\r\n              isEditing={isEditing}\r\n              onSubmit={this.handleEditSubmit}\r\n              onEditClick={this.handleEditClick}\r\n              onDelete={onDelete}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </ListGroupItem>\r\n    );\r\n  }\r\n}\r\n\r\nTaskComponent.propTypes = {\r\n  task: taskType.isRequired,\r\n  isActive: PropTypes.bool,\r\n  onSetActive: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskComponent;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ListGroup } from 'reactstrap';\r\nimport TaskComponent from './taskComponent';\r\nimport { taskType } from '../types';\r\n\r\nclass TaskList extends Component {\r\n  isActive(taskId) {\r\n    const { currentTask } = this.props;\r\n    return currentTask && currentTask._id === taskId;\r\n  }\r\n\r\n  render() {\r\n    const { tasks, onSetActiveTask, onDelete, onEdit } = this.props;\r\n\r\n    return (\r\n      <ListGroup flush>\r\n        {tasks.length === 0 && <p>Add a task and start working!</p>}\r\n        {tasks &&\r\n          tasks.map(task => (\r\n            <TaskComponent\r\n              key={task._id}\r\n              task={task}\r\n              isActive={this.isActive(task._id)}\r\n              onSetActive={onSetActiveTask}\r\n              onDelete={onDelete}\r\n              onEdit={onEdit}\r\n            />\r\n          ))}\r\n      </ListGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.arrayOf(taskType),\r\n  currentTask: taskType,\r\n  onSetActiveTask: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskList;\r\n","const key = 'tasks';\r\n\r\nfunction getAll() {\r\n  return JSON.parse(localStorage.getItem(key));\r\n}\r\n\r\nfunction save(tasks) {\r\n  return localStorage.setItem(key, JSON.stringify(tasks));\r\n}\r\n\r\nexport default { getAll, save };\r\n","export default class Task {\r\n  constructor(id, name, pomodori) {\r\n    this._id = id;\r\n    this.name = name;\r\n    this.pomodori = pomodori;\r\n  }\r\n\r\n  addPomodoro = () => this.pomodori++;\r\n\r\n  static getDefaultTask = () => new Task('1', 'Untitled task', 0);\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskInput from './taskInput';\r\nimport TaskList from './taskList';\r\nimport taskService from '../services/taskService';\r\nimport Task from '../models/task';\r\n\r\nclass Tasks extends Component {\r\n  state = {\r\n    tasks: [],\r\n    currentTask: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initTasks();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.tasks !== this.state.tasks) this.onTasksChanged();\r\n\r\n    if (!prevProps.pendingPomodoro && this.props.pendingPomodoro)\r\n      this.addPomodoroToCurrentTask();\r\n  }\r\n\r\n  initTasks() {\r\n    let tasks = taskService.getAll();\r\n    if (!tasks || tasks.length === 0) tasks = [Task.getDefaultTask()];\r\n\r\n    this.setState({ tasks, currentTask: tasks[0] });\r\n  }\r\n\r\n  getTotalPomodori() {\r\n    const { tasks } = this.state;\r\n    return tasks.length === 0\r\n      ? 0\r\n      : tasks.reduce((t, curr) => t + curr.pomodori, 0);\r\n  }\r\n\r\n  onTasksChanged() {\r\n    const { tasks } = this.state;\r\n    const { onTasksChanged } = this.props;\r\n\r\n    onTasksChanged(tasks.length, this.getTotalPomodori());\r\n    taskService.save(tasks);\r\n  }\r\n\r\n  addPomodoroToCurrentTask() {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n    const { onPomodoroAssigned } = this.props;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.indexOf(currentTask);\r\n    const task = new Task(\r\n      tasks[index]._id,\r\n      tasks[index].name,\r\n      tasks[index].pomodori + 1\r\n    );\r\n    tasks[index] = task;\r\n\r\n    this.setState({\r\n      tasks,\r\n      currentTask: task\r\n    });\r\n    onPomodoroAssigned();\r\n  }\r\n\r\n  handleSetActiveTask = task => {\r\n    this.setState({ currentTask: task });\r\n  };\r\n\r\n  handleNewTask = (name, pomodori = 0) => {\r\n    if (name === '>>es') return this.props.DEBUG_se_hack();\r\n\r\n    const tasks = [...this.state.tasks];\r\n    const task = new Task(\r\n      `${name.length}${Math.random() * 1000000}`,\r\n      name.trim(),\r\n      pomodori\r\n    );\r\n    tasks.push(task);\r\n\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  handleDeleteTask = task => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    if (\r\n      oldTasks.length === 1 &&\r\n      oldTasks[0].name === Task.getDefaultTask().name\r\n    )\r\n      return;\r\n\r\n    let tasks = [...oldTasks];\r\n    const updates = {};\r\n\r\n    tasks.splice(tasks.indexOf(task), 1);\r\n    if (tasks.length === 0) tasks = [Task.getDefaultTask()];\r\n\r\n    updates.tasks = tasks;\r\n    if (!currentTask || task._id === currentTask._id || tasks.length === 1)\r\n      updates.currentTask = tasks[0];\r\n\r\n    this.setState(updates);\r\n  };\r\n\r\n  handleEditTask = (id, name) => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.findIndex(t => t._id === id);\r\n    const task = new Task(tasks[index]._id, name.trim(), tasks[index].pomodori);\r\n    tasks[index] = task;\r\n\r\n    const updates = { tasks };\r\n    if (task._id === currentTask._id) updates.currentTask = task;\r\n    this.setState(updates);\r\n  };\r\n\r\n  render() {\r\n    const { tasks, currentTask } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <TaskInput\r\n          placeholder=\"Enter task here...\"\r\n          onSubmit={this.handleNewTask}\r\n        />\r\n        <TaskList\r\n          tasks={tasks}\r\n          currentTask={currentTask}\r\n          onSetActiveTask={this.handleSetActiveTask}\r\n          onEdit={this.handleEditTask}\r\n          onDelete={this.handleDeleteTask}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTasks.propTypes = {\r\n  pendingPomodoro: PropTypes.bool.isRequired,\r\n  onTasksChanged: PropTypes.func.isRequired,\r\n  onPomodoroAssigned: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Tasks;\r\n","class Time {\r\n  constructor(min, sec) {\r\n    this.min = min;\r\n    this.sec = sec;\r\n  }\r\n\r\n  toString() {\r\n    const m = this.min < 10 ? `0${this.min}` : this.min;\r\n    const s = this.sec < 10 ? `0${this.sec}` : this.sec;\r\n    return `${m} : ${s}`;\r\n  }\r\n}\r\n\r\nexport default Time;\r\n","import React from 'react';\r\n\r\nconst Sound = () => {\r\n  return (\r\n    <audio volume=\"0.5\" src=\"./sound/alert.mp3\" autoPlay>\r\n      It looks like your browser doesn't support audio playback through html...\r\n    </audio>\r\n  );\r\n};\r\n\r\nexport default Sound;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Time from '../models/time';\r\nimport Sound from './sound';\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    running: false,\r\n    time: new Time(0, 0),\r\n    timer: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setTime(this.props.currentSessionValue, 0);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.currentSessionValue !== this.props.currentSessionValue)\r\n      this.onNewSession();\r\n  }\r\n\r\n  setTime = (min, sec) => this.setState({ time: new Time(min, sec) });\r\n\r\n  handleSecondPassed = () => {\r\n    const { time } = this.state;\r\n    const nextTime = { ...time };\r\n\r\n    if (time.sec === 0 && time.min === 0) return this.timerFinished();\r\n\r\n    if (time.sec === 0) {\r\n      nextTime.min = time.min - 1;\r\n      nextTime.sec = 59;\r\n    } else {\r\n      nextTime.sec = time.sec - 1;\r\n    }\r\n\r\n    this.setTime(nextTime.min, nextTime.sec);\r\n  };\r\n\r\n  handleTimerToggle = () => {\r\n    const { running } = this.state;\r\n\r\n    if (running) this.stopTimer();\r\n    else this.startTimer();\r\n  };\r\n\r\n  stopTimer() {\r\n    const { timer } = this.state;\r\n    const { onTimerStop } = this.props;\r\n\r\n    clearInterval(timer);\r\n    this.setState({ timer: null, running: false });\r\n    onTimerStop();\r\n  }\r\n\r\n  startTimer() {\r\n    const { running } = this.state;\r\n    const { onTimerStart } = this.props;\r\n\r\n    if (running) this.stopTimer();\r\n\r\n    this.setState({\r\n      timer: setInterval(this.handleSecondPassed, 1000),\r\n      running: true\r\n    });\r\n    onTimerStart();\r\n  }\r\n\r\n  onNewSession = () => {\r\n    this.setTime(this.props.currentSessionValue, 0);\r\n    this.startTimer();\r\n  };\r\n\r\n  timerFinished = () => {\r\n    const { onTimerDone } = this.props;\r\n\r\n    this.stopTimer();\r\n    this.playSound();\r\n    onTimerDone();\r\n  };\r\n\r\n  playSound() {\r\n    this.setState({ playSound: true }, () => {\r\n      setTimeout(() => this.setState({ playSound: false }), 5000);\r\n    });\r\n  }\r\n\r\n  isPaused = () => {\r\n    const { time, timer } = this.state;\r\n    const { currentSessionValue } = this.props;\r\n\r\n    return (\r\n      !timer &&\r\n      time.min !== currentSessionValue &&\r\n      (time.min !== 0 && time.sec !== 0)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { time, playSound } = this.state;\r\n    const { isPomodoro } = this.props;\r\n\r\n    let classes = 'time clickable';\r\n    const blink = this.isPaused() ? ' blink' : '',\r\n      color = isPomodoro ? ' working' : ' break';\r\n    classes += blink + color;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h3 id=\"time\" className={classes} onClick={this.handleTimerToggle}>\r\n          {time.toString()}\r\n        </h3>\r\n        {playSound && <Sound />}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTime.propTypes = {\r\n  currentSessionValue: PropTypes.number.isRequired,\r\n  isPomodoro: PropTypes.bool.isRequired,\r\n  onTimerStart: PropTypes.func.isRequired,\r\n  onTimerStop: PropTypes.func.isRequired,\r\n  onTimerDone: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row } from 'reactstrap';\r\nimport AppNavbar from './components/appNavbar';\r\nimport InfoModal from './components/infoModal';\r\nimport LeftToBottomCol from './components/leftToBottomCol';\r\nimport RightToTopCol from './components/rightToTopCol';\r\nimport SessionButtons from './components/sessionButtons';\r\nimport Summary from './components/summary';\r\nimport Tasks from './components/tasks';\r\nimport Timer from './components/timer';\r\nimport './App.css';\r\n\r\nconst Session = {\r\n  POMODORO: 25,\r\n  SHORT_BREAK: 5,\r\n  LONG_BREAK: 10\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentSession: Session.POMODORO,\r\n    taskCount: 0,\r\n    pomodoroCount: 0,\r\n    pendingPomodoro: false,\r\n    isWorking: false,\r\n    infoModalOpen: false\r\n  };\r\n\r\n  onPomodoroFinished() {\r\n    const { pomodoroCount: oldPomodoroCount } = this.state;\r\n\r\n    const pomodoroCount = oldPomodoroCount + 1;\r\n\r\n    this.setState({\r\n      pomodoroCount,\r\n      pendingPomodoro: true\r\n    });\r\n    this.handleSetSession(this.getBreakduration(pomodoroCount));\r\n  }\r\n\r\n  getBreakduration(pomodoroCount) {\r\n    return pomodoroCount > 0 && pomodoroCount % 4 === 0\r\n      ? Session.LONG_BREAK\r\n      : Session.SHORT_BREAK;\r\n  }\r\n\r\n  handleSessionEnd = () => {\r\n    const { currentSession } = this.state;\r\n\r\n    if (currentSession === Session.POMODORO) this.onPomodoroFinished();\r\n    else this.handleSetSession(Session.POMODORO);\r\n  };\r\n\r\n  handleSetSession = session => this.setState({ currentSession: session });\r\n\r\n  handleTimerStart = () => {\r\n    this.setState({\r\n      isWorking: this.state.currentSession === Session.POMODORO\r\n    });\r\n  };\r\n\r\n  handleTimerStop = () => this.setState({ isWorking: false });\r\n\r\n  handleTaskCountChange = (taskCount, pomodoroCount) =>\r\n    this.setState({ taskCount, pomodoroCount });\r\n\r\n  handlePomodoroAssigned = () => {\r\n    if (this.state.pendingPomodoro) this.setState({ pendingPomodoro: false });\r\n  };\r\n\r\n  handleInfoModalToggle = () =>\r\n    this.setState({ infoModalOpen: !this.state.infoModalOpen });\r\n\r\n  render() {\r\n    const {\r\n      pomodoroCount,\r\n      currentSession,\r\n      pendingPomodoro,\r\n      isWorking,\r\n      taskCount,\r\n      infoModalOpen\r\n    } = this.state;\r\n\r\n    const isSessionPomodoro = currentSession === Session.POMODORO;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <AppNavbar\r\n          title=\"Pomodori Story\"\r\n          isBreakTime={!isSessionPomodoro}\r\n          isWorking={isWorking}\r\n          onInfoClick={this.handleInfoModalToggle}\r\n        />\r\n        <InfoModal\r\n          isOpen={infoModalOpen}\r\n          onToggle={this.handleInfoModalToggle}\r\n        />\r\n        <Container>\r\n          <Row>\r\n            <LeftToBottomCol>\r\n              <Tasks\r\n                pendingPomodoro={pendingPomodoro}\r\n                onTasksChanged={this.handleTaskCountChange}\r\n                onPomodoroAssigned={this.handlePomodoroAssigned}\r\n                DEBUG_se_hack={this.handleSessionEnd}\r\n              />\r\n            </LeftToBottomCol>\r\n            <RightToTopCol>\r\n              <SessionButtons\r\n                currentSession={currentSession}\r\n                session={Session}\r\n                onButtonClick={this.handleSetSession}\r\n              />\r\n              <Timer\r\n                currentSessionValue={currentSession}\r\n                isPomodoro={isSessionPomodoro}\r\n                onTimerStart={this.handleTimerStart}\r\n                onTimerStop={this.handleTimerStop}\r\n                onTimerDone={this.handleSessionEnd}\r\n              />\r\n              <Summary taskCount={taskCount} pomodoroCount={pomodoroCount} />\r\n            </RightToTopCol>\r\n          </Row>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}