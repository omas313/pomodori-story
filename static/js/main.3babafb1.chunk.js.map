{"version":3,"sources":["components/appNavbar.jsx","components/infoModal.jsx","components/rangeInput.jsx","models/session.js","services/settingsService.js","components/settingsModal.jsx","components/leftToBottomCol.jsx","components/rightToTopCol.jsx","components/sessionButtons.jsx","components/summary.jsx","components/taskInput.jsx","components/taskButtons.jsx","types/index.js","components/taskComponent.jsx","components/taskList.jsx","services/taskService.js","models/task.js","components/tasks.jsx","models/time.js","components/sound.jsx","components/timer.jsx","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","handleToggle","_this","setState","this","_this$props","props","title","isBreakTime","isWorking","onInfoClick","onSettingsClick","classes","concat","react_default","a","createElement","reactstrap_es","dark","expand","className","href","onClick","navbar","id","Component","InfoModal","_ref","onToggle","toggle","target","rel","RangeInput","value","handleChange","input","currentTarget","name","onChange","Number","default","_this$props2","label","for","type","min","max","defaultProps","Session","timers","pomodoro","POMODORO","shortBreak","SHORT_BREAK","longBreak","LONG_BREAK","getTimers","getBreakduration","pomodori","timersKeys","settingsService","values","Object","keys","map","k","localStorage","getItem","saveTimers","setItem","SettingsModal","handleTimerChange","objectSpread","prevProps","prevState","save","setTimers","rangeInput","LeftToBottomCol","children","lg","size","order","xs","RightToTopCol","SessionButtons","isActive","sess","currentSession","getButtonClasses","onButtonClick","src","alt","Summary","taskCount","pomodoroCount","TaskInput","text","handleKeyDown","_ref2","key","handleSubmit","trim","onSubmit","_this2","placeholder","onKeyDown","onBlur","autoFocus","TaskButtons","shape","_id","string","isRequired","number","task","onDelete","onEditClick","Fragment","color","outline","newName","isEditing","renderSubmitEditButton","renderActionButtons","TaskComponent","handleEditClick","handleEditSubmit","onEdit","getBadgeColor","_this$state","onSetActive","taskClasses","taskInput","md","pill","taskButtons","TaskList","taskId","currentTask","tasks","onSetActiveTask","flush","length","taskComponent","taskService","getAll","JSON","parse","stringify","Task","classCallCheck","addPomodoro","getDefaultTask","Tasks","handleSetActiveTask","handleNewTask","arguments","undefined","DEBUG_se_hack","toConsumableArray","Math","random","push","handleDeleteTask","oldTasks","newTask","updates","splice","indexOf","handleEditTask","_this$state2","index","findIndex","t","initTasks","onTasksChanged","pendingPomodoro","addPomodoroToCurrentTask","reduce","curr","getTotalPomodori","_this$state3","onPomodoroAssigned","_this$state4","taskList","Time","sec","m","s","Sound","volume","autoPlay","Timer","running","time","timer","setTime","handleSecondPassed","nextTime","timerFinished","handleTimerToggle","stopTimer","startTimer","onNewSession","currentSessionValue","startOnChange","onTimerDone","playSound","isPaused","onTimerStop","clearInterval","onTimerStart","setInterval","setTimeout","isPomodoro","toString","sound","propTypes","PropTypes","bool","func","App","infoModalOpen","settingsModalOpen","timersInitialized","handleSessionEnd","onPomodoroFinished","handleSetSession","session","handleTimerStart","handleTimerStop","handleTaskCountChange","handlePomodoroAssigned","handleInfoModalToggle","handleSettingsModalToggle","initTimers","isSessionPomodoro","appNavbar","infoModal","settingsModal","leftToBottomCol","components_tasks","rightToTopCol","sessionButtons","summary","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3babafb1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  handleToggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { isOpen } = this.state;\r\n    const {\r\n      title,\r\n      isBreakTime,\r\n      isWorking,\r\n      onInfoClick,\r\n      onSettingsClick\r\n    } = this.props;\r\n\r\n    const classes = `${isBreakTime ? 'break-vibe' : ''} ${\r\n      isWorking ? 'animate' : ''\r\n    }`;\r\n\r\n    return (\r\n      <div>\r\n        <Navbar dark expand=\"md\" className={classes}>\r\n          <NavbarBrand href=\"/\">{title}</NavbarBrand>\r\n          <NavbarToggler onClick={this.handleToggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink\r\n                  id=\"info-nav-link\"\r\n                  className=\"clickable\"\r\n                  onClick={onInfoClick}\r\n                >\r\n                  Info\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  id=\"settings-nav-link\"\r\n                  className=\"clickable\"\r\n                  onClick={onSettingsClick}\r\n                >\r\n                  Settings\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// TODO: make prop names clearer\r\nAppNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  isBreakTime: PropTypes.bool.isRequired,\r\n  isWorking: PropTypes.bool.isRequired,\r\n  onInfoClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\n\r\nconst InfoModal = ({ isOpen, onToggle }) => {\r\n  return (\r\n    <Modal isOpen={isOpen} toggle={onToggle} className=\"info-modal\">\r\n      <ModalHeader toggle={onToggle}>Info</ModalHeader>\r\n      <ModalBody>\r\n        <h5>Pomodoro, pomodori?</h5>\r\n        <p>It is the Italian word for tomato, and the plural is pomodori.</p>\r\n\r\n        <h5>What is this website?</h5>\r\n        <p>\r\n          It is a timer web application I developed to implement the Pomodoro\r\n          Technique which also includes helpful task tracking.\r\n        </p>\r\n\r\n        <h5>The Pomodoro Technique</h5>\r\n        <p>\r\n          It is a time-management and productivity booster technique created by\r\n          Francesco Cirillo.\r\n          <br />\r\n          It can help size up tasks and maintain focus throughout your work by\r\n          diving it into time chunks.\r\n          <br />\r\n          You can read more about it{' '}\r\n          <a\r\n            href=\"https://francescocirillo.com/pages/pomodoro-technique\"\r\n            className=\"link\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            here\r\n          </a>\r\n          .\r\n        </p>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nInfoModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default InfoModal;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Input, FormGroup, Label } from 'reactstrap';\r\n\r\nclass RangeInput extends Component {\r\n  state = {\r\n    value: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ value: this.props.default });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const { name, onChange } = this.props;\r\n    onChange(name, Number(input.value));\r\n    this.setState({ value: input.value });\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const { name, label } = this.props;\r\n\r\n    return (\r\n      <FormGroup>\r\n        <Row>\r\n          <Col>\r\n            <Label for={name}>{label}</Label>\r\n          </Col>\r\n          <Col>\r\n            <Input\r\n              type=\"number\"\r\n              min=\"1\"\r\n              max=\"120\"\r\n              name={name}\r\n              value={value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nRangeInput.propTypes = {\r\n  name: PropTypes.string,\r\n  value: PropTypes.number,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nRangeInput.defaultProps = {\r\n  name: '',\r\n  value: 0,\r\n  onChange: () => null\r\n};\r\n\r\nexport default RangeInput;\r\n","export default class Session {\r\n  static POMODORO = 25;\r\n  static SHORT_BREAK = 5;\r\n  static LONG_BREAK = 10;\r\n\r\n  static setTimers(timers) {\r\n    if (timers.pomodoro !== 0) Session.POMODORO = timers.pomodoro;\r\n    if (timers.shortBreak !== 0) Session.SHORT_BREAK = timers.shortBreak;\r\n    if (timers.longBreak !== 0) Session.LONG_BREAK = timers.longBreak;\r\n  }\r\n\r\n  static getTimers = () => {\r\n    return {\r\n      pomodoro: Session.POMODORO,\r\n      shortBreak: Session.SHORT_BREAK,\r\n      longBreak: Session.LONG_BREAK\r\n    };\r\n  };\r\n\r\n  static getBreakduration = pomodori =>\r\n    pomodori > 0 && pomodori % 4 === 0\r\n      ? Session.LONG_BREAK\r\n      : Session.SHORT_BREAK;\r\n}\r\n","const timersKeys = {\r\n  pomodoro: 'pomodoro',\r\n  shortBreak: 'sb',\r\n  longBreak: 'lb'\r\n};\r\n\r\nfunction getTimers() {\r\n  const values = Object.keys(timersKeys).map(k =>\r\n    Number(localStorage.getItem(timersKeys[k]))\r\n  );\r\n  return {\r\n    pomodoro: values[0],\r\n    shortBreak: values[1],\r\n    longBreak: values[2]\r\n  };\r\n}\r\n\r\nfunction saveTimers(timers) {\r\n  localStorage.setItem(timersKeys.pomodoro, timers.pomodoro);\r\n  localStorage.setItem(timersKeys.shortBreak, timers.shortBreak);\r\n  localStorage.setItem(timersKeys.longBreak, timers.longBreak);\r\n}\r\n\r\nexport default {\r\n  getTimers,\r\n  saveTimers\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport RangeInput from './rangeInput';\r\nimport Session from './../models/session';\r\nimport settingsService from '../services/settingsService';\r\n\r\nclass SettingsModal extends Component {\r\n  state = {\r\n    timers: {\r\n      pomodoro: 0,\r\n      shortBreak: 0,\r\n      longBreak: 0\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.isOpen && !this.props.isOpen) this.save();\r\n  }\r\n\r\n  handleTimerChange = (name, value) => {\r\n    const timers = { ...this.state.timers };\r\n    timers[name] = value;\r\n    this.setState({ timers });\r\n  };\r\n\r\n  save() {\r\n    Session.setTimers(this.state.timers);\r\n    settingsService.saveTimers(Session.getTimers());\r\n  }\r\n\r\n  render() {\r\n    const { isOpen, onToggle } = this.props;\r\n\r\n    return (\r\n      <Modal isOpen={isOpen} toggle={onToggle} className=\"settings-modal\">\r\n        <ModalHeader toggle={onToggle}>Settings</ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"mb-3\">\r\n            <strong>Timer Durations</strong>\r\n          </div>\r\n          <RangeInput\r\n            name=\"pomodoro\"\r\n            label=\"Pomodoro\"\r\n            default={Session.POMODORO}\r\n            onChange={this.handleTimerChange}\r\n          />\r\n          <RangeInput\r\n            name=\"shortBreak\"\r\n            label=\"Short Break\"\r\n            default={Session.SHORT_BREAK}\r\n            onChange={this.handleTimerChange}\r\n          />\r\n          <RangeInput\r\n            name=\"longBreak\"\r\n            label=\"Long Break\"\r\n            default={Session.LONG_BREAK}\r\n            onChange={this.handleTimerChange}\r\n          />\r\n        </ModalBody>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nSettingsModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SettingsModal;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst LeftToBottomCol = ({ children }) => (\r\n  <Col\r\n    lg={{ size: 8, order: 1 }}\r\n    xs={{ size: 12, order: 2 }}\r\n    className=\"left-to-bottom-column\"\r\n  >\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default LeftToBottomCol;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\n\r\nconst RightToTopCol = ({ children }) => (\r\n  <Col lg={{ size: 4, order: 2 }} xs={{ size: 12, order: 1 }}>\r\n    {children}\r\n  </Col>\r\n);\r\n\r\nexport default RightToTopCol;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport Session from '../models/session';\r\n\r\nclass SessionButtons extends Component {\r\n  isActive = sess => this.props.currentSession === sess;\r\n\r\n  getButtonClasses = sess => {\r\n    const pomodoro = sess === Session.POMODORO;\r\n\r\n    let classes = pomodoro ? 'pomodoro-button' : 'break-button';\r\n    if (this.isActive(sess)) classes += pomodoro ? ' working' : ' break';\r\n\r\n    return classes;\r\n  };\r\n\r\n  render() {\r\n    const { onButtonClick } = this.props;\r\n\r\n    return (\r\n      <div className=\"session-buttons\">\r\n        <Button\r\n          id=\"pomodoro-session-button\"\r\n          className={this.getButtonClasses(Session.POMODORO)}\r\n          onClick={() => onButtonClick(Session.POMODORO)}\r\n        >\r\n          <img\r\n            src=\"./img/pomodoro.png\"\r\n            alt=\"pomodoro\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n        <Button\r\n          id=\"short-break-session-button\"\r\n          className={this.getButtonClasses(Session.SHORT_BREAK)}\r\n          onClick={() => onButtonClick(Session.SHORT_BREAK)}\r\n        >\r\n          <img\r\n            src=\"./img/time-5.png\"\r\n            alt=\"Short break\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n        <Button\r\n          id=\"long-break-session-button\"\r\n          className={this.getButtonClasses(Session.LONG_BREAK)}\r\n          onClick={() => onButtonClick(Session.LONG_BREAK)}\r\n        >\r\n          <img\r\n            src=\"./img/time-10.png\"\r\n            alt=\"Long break\"\r\n            className=\"session-button-img\"\r\n          />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSessionButtons.propTypes = {\r\n  onButtonClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SessionButtons;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nconst Summary = ({ taskCount, pomodoroCount }) => {\r\n  return (\r\n    <Row className=\"summary\">\r\n      <Col className=\"text-center\">\r\n        <p className=\"text-bold\">Tasks</p>\r\n        <p id=\"summary-task-count\">{taskCount}</p>\r\n      </Col>\r\n      <Col className=\"text-center\">\r\n        <p className=\"text-bold\">Pomodori</p>\r\n        <p id=\"summary-pomodoro-count\">{pomodoroCount}</p>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nSummary.propTypes = {\r\n  taskCount: PropTypes.number.isRequired,\r\n  pomodoroCount: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Summary;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, FormGroup } from 'reactstrap';\r\n\r\nclass TaskInput extends Component {\r\n  state = {\r\n    text: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ text: this.props.text });\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    this.props.onChange(input.value);\r\n    this.setState({ text: input.value });\r\n  };\r\n\r\n  handleKeyDown = ({ key }) => {\r\n    const { text } = this.state;\r\n    if (key !== 'Enter') return;\r\n\r\n    this.handleSubmit(text);\r\n  };\r\n\r\n  handleSubmit = text => {\r\n    if (!text.trim()) return;\r\n\r\n    const { onSubmit } = this.props;\r\n\r\n    onSubmit(text);\r\n    this.setState({ text: '' });\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    const { placeholder } = this.props;\r\n\r\n    return (\r\n      <FormGroup>\r\n        <Input\r\n          name=\"task-input\"\r\n          placeholder={placeholder}\r\n          value={text}\r\n          onChange={this.handleChange}\r\n          onKeyDown={this.handleKeyDown}\r\n          onBlur={() => this.handleSubmit(text)}\r\n          autoFocus\r\n        />\r\n      </FormGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskInput.propTypes = {\r\n  text: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nTaskInput.defaultProps = {\r\n  text: '',\r\n  placeholder: '',\r\n  onChange: () => null\r\n};\r\n\r\nexport default TaskInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport { taskType } from './../types/index';\r\n\r\nclass TaskButtons extends Component {\r\n  renderActionButtons() {\r\n    const { task, onDelete, onEditClick } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          id=\"task-edit-button\"\r\n          className=\"action-button\"\r\n          size=\"sm\"\r\n          color=\"primary\"\r\n          outline\r\n          onClick={onEditClick}\r\n        >\r\n          <img src=\"./img/edit.svg\" alt=\"Edit\" />\r\n        </Button>\r\n        <Button\r\n          id=\"task-delete-button\"\r\n          className=\"action-button\"\r\n          size=\"sm\"\r\n          color=\"primary\"\r\n          outline\r\n          onClick={() => onDelete(task)}\r\n        >\r\n          <img src=\"./img/delete.svg\" alt=\"Delete\" />\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  renderSubmitEditButton() {\r\n    const { newName, onSubmit } = this.props;\r\n\r\n    return (\r\n      <Button\r\n        id=\"task-submit-edit-button\"\r\n        className=\"action-button\"\r\n        size=\"sm\"\r\n        color=\"primary\"\r\n        outline\r\n        onClick={() => onSubmit(newName)}\r\n      >\r\n        <img src=\"./img/check-mark.svg\" alt=\"Edit\" />\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isEditing } = this.props;\r\n    return isEditing\r\n      ? this.renderSubmitEditButton()\r\n      : this.renderActionButtons();\r\n  }\r\n}\r\n\r\nTaskButtons.propTypes = {\r\n  task: taskType,\r\n  newName: PropTypes.string.isRequired,\r\n  isEditing: PropTypes.bool.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEditClick: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskButtons;\r\n","import { shape, string, number } from 'prop-types';\r\n\r\nexport const taskType = shape({\r\n  _id: string.isRequired,\r\n  name: string.isRequired,\r\n  pomodori: number.isRequired\r\n});\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, ListGroupItem, Badge } from 'reactstrap';\r\nimport TaskInput from './taskInput';\r\nimport TaskButtons from './taskButtons';\r\nimport { taskType } from '../types/index';\r\n\r\nclass TaskComponent extends Component {\r\n  state = {\r\n    isEditing: false,\r\n    newName: ''\r\n  };\r\n\r\n  handleEditClick = () => {\r\n    const { isEditing } = this.state;\r\n    this.setState({ isEditing: !isEditing });\r\n  };\r\n\r\n  handleEditSubmit = name => {\r\n    const { task, onEdit } = this.props;\r\n    onEdit(task._id, name);\r\n    this.setState({ isEditing: false });\r\n  };\r\n\r\n  handleChange = newName => {\r\n    this.setState({ newName });\r\n  };\r\n\r\n  getBadgeColor = () =>\r\n    this.props.task.pomodori === 0 ? 'secondary' : 'primary';\r\n\r\n  render() {\r\n    const { isEditing, newName } = this.state;\r\n    const { task, isActive, onSetActive, onDelete } = this.props;\r\n\r\n    const taskClasses = 'task' + (isActive ? ' active' : '');\r\n\r\n    return (\r\n      <ListGroupItem className={taskClasses}>\r\n        <Row>\r\n          <Col\r\n            className=\"w-100 clickable task-name\"\r\n            onClick={() => onSetActive(task)}\r\n          >\r\n            {isEditing ? (\r\n              <TaskInput\r\n                text={task.name}\r\n                onChange={this.handleChange}\r\n                onSubmit={this.handleEditSubmit}\r\n              />\r\n            ) : (\r\n              task.name\r\n            )}\r\n          </Col>\r\n          <Col md=\"2\" xs=\"1\">\r\n            <Badge color={this.getBadgeColor()} pill>\r\n              {task.pomodori}\r\n            </Badge>\r\n          </Col>\r\n          <Col md=\"3\" xs=\"3\" className=\"text-right action-buttons\">\r\n            <TaskButtons\r\n              task={task}\r\n              newName={newName}\r\n              isEditing={isEditing}\r\n              onSubmit={this.handleEditSubmit}\r\n              onEditClick={this.handleEditClick}\r\n              onDelete={onDelete}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </ListGroupItem>\r\n    );\r\n  }\r\n}\r\n\r\nTaskComponent.propTypes = {\r\n  task: taskType.isRequired,\r\n  isActive: PropTypes.bool,\r\n  onSetActive: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskComponent;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ListGroup } from 'reactstrap';\r\nimport TaskComponent from './taskComponent';\r\nimport { taskType } from '../types';\r\n\r\nclass TaskList extends Component {\r\n  isActive(taskId) {\r\n    const { currentTask } = this.props;\r\n    return currentTask && currentTask._id === taskId;\r\n  }\r\n\r\n  render() {\r\n    const { tasks, onSetActiveTask, onDelete, onEdit } = this.props;\r\n\r\n    return (\r\n      <ListGroup flush>\r\n        {tasks.length === 0 && <p>Add a task and start working!</p>}\r\n        {tasks &&\r\n          tasks.map(task => (\r\n            <TaskComponent\r\n              key={task._id}\r\n              task={task}\r\n              isActive={this.isActive(task._id)}\r\n              onSetActive={onSetActiveTask}\r\n              onDelete={onDelete}\r\n              onEdit={onEdit}\r\n            />\r\n          ))}\r\n      </ListGroup>\r\n    );\r\n  }\r\n}\r\n\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.arrayOf(taskType),\r\n  currentTask: taskType,\r\n  onSetActiveTask: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskList;\r\n","const key = 'tasks';\r\n\r\nfunction getAll() {\r\n  return JSON.parse(localStorage.getItem(key));\r\n}\r\n\r\nfunction save(tasks) {\r\n  return localStorage.setItem(key, JSON.stringify(tasks));\r\n}\r\n\r\nexport default { getAll, save };\r\n","export default class Task {\r\n  constructor(id, name, pomodori) {\r\n    this._id = id;\r\n    this.name = name;\r\n    this.pomodori = pomodori;\r\n  }\r\n\r\n  addPomodoro = () => this.pomodori++;\r\n\r\n  static getDefaultTask = () => new Task('1', 'Untitled task', 0);\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskInput from './taskInput';\r\nimport TaskList from './taskList';\r\nimport taskService from '../services/taskService';\r\nimport Task from '../models/task';\r\n\r\nclass Tasks extends Component {\r\n  state = {\r\n    tasks: [],\r\n    currentTask: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initTasks();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.tasks !== this.state.tasks) this.onTasksChanged();\r\n\r\n    if (!prevProps.pendingPomodoro && this.props.pendingPomodoro)\r\n      this.addPomodoroToCurrentTask();\r\n  }\r\n\r\n  initTasks() {\r\n    let tasks = taskService.getAll();\r\n    if (!tasks || tasks.length === 0) tasks = [Task.getDefaultTask()];\r\n\r\n    this.setState({ tasks, currentTask: tasks[0] });\r\n  }\r\n\r\n  getTotalPomodori() {\r\n    const { tasks } = this.state;\r\n    return tasks.length === 0\r\n      ? 0\r\n      : tasks.reduce((t, curr) => t + curr.pomodori, 0);\r\n  }\r\n\r\n  onTasksChanged() {\r\n    const { tasks } = this.state;\r\n    const { onTasksChanged } = this.props;\r\n\r\n    onTasksChanged(tasks.length, this.getTotalPomodori());\r\n    taskService.save(tasks);\r\n  }\r\n\r\n  addPomodoroToCurrentTask() {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n    const { onPomodoroAssigned } = this.props;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.indexOf(currentTask);\r\n    const task = new Task(\r\n      tasks[index]._id,\r\n      tasks[index].name,\r\n      tasks[index].pomodori + 1\r\n    );\r\n    tasks[index] = task;\r\n\r\n    this.setState({\r\n      tasks,\r\n      currentTask: task\r\n    });\r\n    onPomodoroAssigned();\r\n  }\r\n\r\n  handleSetActiveTask = task => {\r\n    this.setState({ currentTask: task });\r\n  };\r\n\r\n  handleNewTask = (name, pomodori = 0) => {\r\n    if (name === '>>es') return this.props.DEBUG_se_hack();\r\n\r\n    const tasks = [...this.state.tasks];\r\n    const task = new Task(\r\n      `${name.length}${Math.random() * 1000000}`,\r\n      name.trim(),\r\n      pomodori\r\n    );\r\n    tasks.push(task);\r\n\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  handleDeleteTask = task => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    if (oldTasks.length <= 1) {\r\n      const newTask = Task.getDefaultTask();\r\n      return this.setState({ tasks: [newTask], currentTask: newTask });\r\n    }\r\n\r\n    let tasks = [...oldTasks];\r\n    const updates = {};\r\n\r\n    tasks.splice(tasks.indexOf(task), 1);\r\n\r\n    updates.tasks = tasks;\r\n    if (!currentTask || task._id === currentTask._id || tasks.length === 1)\r\n      updates.currentTask = tasks[0];\r\n\r\n    this.setState(updates);\r\n  };\r\n\r\n  handleEditTask = (id, name) => {\r\n    const { tasks: oldTasks, currentTask } = this.state;\r\n\r\n    const tasks = [...oldTasks];\r\n    const index = tasks.findIndex(t => t._id === id);\r\n    const task = new Task(tasks[index]._id, name.trim(), tasks[index].pomodori);\r\n    tasks[index] = task;\r\n\r\n    const updates = { tasks };\r\n    if (task._id === currentTask._id) updates.currentTask = task;\r\n    this.setState(updates);\r\n  };\r\n\r\n  render() {\r\n    const { tasks, currentTask } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <TaskInput\r\n          placeholder=\"Enter task here...\"\r\n          onSubmit={this.handleNewTask}\r\n        />\r\n        <TaskList\r\n          tasks={tasks}\r\n          currentTask={currentTask}\r\n          onSetActiveTask={this.handleSetActiveTask}\r\n          onEdit={this.handleEditTask}\r\n          onDelete={this.handleDeleteTask}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTasks.propTypes = {\r\n  pendingPomodoro: PropTypes.bool.isRequired,\r\n  onTasksChanged: PropTypes.func.isRequired,\r\n  onPomodoroAssigned: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Tasks;\r\n","class Time {\r\n  constructor(min, sec) {\r\n    this.min = min;\r\n    this.sec = sec;\r\n  }\r\n\r\n  toString() {\r\n    const m = this.min < 10 ? `0${this.min}` : this.min;\r\n    const s = this.sec < 10 ? `0${this.sec}` : this.sec;\r\n    return `${m} : ${s}`;\r\n  }\r\n}\r\n\r\nexport default Time;\r\n","import React from 'react';\r\n\r\nconst Sound = () => {\r\n  return (\r\n    <audio volume=\"0.5\" src=\"./sound/alert.mp3\" autoPlay>\r\n      It looks like your browser doesn't support audio playback through html...\r\n    </audio>\r\n  );\r\n};\r\n\r\nexport default Sound;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Time from '../models/time';\r\nimport Sound from './sound';\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    running: false,\r\n    time: new Time(0, 0),\r\n    timer: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setTime(this.props.currentSessionValue, 0);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.currentSessionValue !== this.props.currentSessionValue)\r\n      this.onNewSession();\r\n  }\r\n\r\n  setTime = (min, sec) => this.setState({ time: new Time(min, sec) });\r\n\r\n  handleSecondPassed = () => {\r\n    const { time } = this.state;\r\n    const nextTime = { ...time };\r\n\r\n    if (time.sec === 0 && time.min === 0) return this.timerFinished();\r\n\r\n    if (time.sec === 0) {\r\n      nextTime.min = time.min - 1;\r\n      nextTime.sec = 59;\r\n    } else {\r\n      nextTime.sec = time.sec - 1;\r\n    }\r\n\r\n    this.setTime(nextTime.min, nextTime.sec);\r\n  };\r\n\r\n  handleTimerToggle = () => {\r\n    const { running } = this.state;\r\n\r\n    if (running) this.stopTimer();\r\n    else this.startTimer();\r\n  };\r\n\r\n  stopTimer() {\r\n    const { timer } = this.state;\r\n    const { onTimerStop } = this.props;\r\n\r\n    clearInterval(timer);\r\n    this.setState({ timer: null, running: false });\r\n    onTimerStop();\r\n  }\r\n\r\n  startTimer() {\r\n    const { running } = this.state;\r\n    const { onTimerStart } = this.props;\r\n\r\n    if (running) this.stopTimer();\r\n\r\n    this.setState({\r\n      timer: setInterval(this.handleSecondPassed, 1000),\r\n      running: true\r\n    });\r\n    onTimerStart();\r\n  }\r\n\r\n  onNewSession = () => {\r\n    const { currentSessionValue, startOnChange } = this.props;\r\n\r\n    this.setTime(currentSessionValue, 0);\r\n    if (startOnChange) this.startTimer();\r\n  };\r\n\r\n  timerFinished = () => {\r\n    const { onTimerDone } = this.props;\r\n\r\n    this.stopTimer();\r\n    this.playSound();\r\n    onTimerDone();\r\n  };\r\n\r\n  playSound() {\r\n    this.setState({ playSound: true }, () => {\r\n      setTimeout(() => this.setState({ playSound: false }), 5000);\r\n    });\r\n  }\r\n\r\n  isPaused = () => {\r\n    const { time, timer } = this.state;\r\n    const { currentSessionValue } = this.props;\r\n\r\n    return (\r\n      !timer &&\r\n      time.min !== currentSessionValue &&\r\n      (time.min !== 0 && time.sec !== 0)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { time, playSound } = this.state;\r\n    const { isPomodoro } = this.props;\r\n\r\n    let classes = 'time clickable';\r\n    const blink = this.isPaused() ? ' blink' : '',\r\n      color = isPomodoro ? ' working' : ' break';\r\n    classes += blink + color;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h3 id=\"time\" className={classes} onClick={this.handleTimerToggle}>\r\n          {time.toString()}\r\n        </h3>\r\n        {playSound && <Sound />}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTime.propTypes = {\r\n  currentSessionValue: PropTypes.number.isRequired,\r\n  isPomodoro: PropTypes.bool.isRequired,\r\n  startOnChange: PropTypes.bool.isRequired,\r\n  onTimerStart: PropTypes.func.isRequired,\r\n  onTimerStop: PropTypes.func.isRequired,\r\n  onTimerDone: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row } from 'reactstrap';\r\nimport AppNavbar from './components/appNavbar';\r\nimport InfoModal from './components/infoModal';\r\nimport SettingsModal from './components/settingsModal';\r\nimport LeftToBottomCol from './components/leftToBottomCol';\r\nimport RightToTopCol from './components/rightToTopCol';\r\nimport SessionButtons from './components/sessionButtons';\r\nimport Summary from './components/summary';\r\nimport Tasks from './components/tasks';\r\nimport Timer from './components/timer';\r\nimport Session from './models/session';\r\nimport './App.css';\r\nimport settingsService from './services/settingsService';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentSession: 0,\r\n    taskCount: 0,\r\n    pomodoroCount: 0,\r\n    pendingPomodoro: false,\r\n    isWorking: false,\r\n    infoModalOpen: false,\r\n    settingsModalOpen: false,\r\n    timersInitialized: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initTimers();\r\n  }\r\n\r\n  initTimers() {\r\n    const timers = settingsService.getTimers();\r\n    Session.setTimers(timers);\r\n    this.setState({ currentSession: Session.POMODORO }, () =>\r\n      this.setState({ timersInitialized: true })\r\n    );\r\n  }\r\n\r\n  onPomodoroFinished() {\r\n    const { pomodoroCount: oldPomodoroCount } = this.state;\r\n\r\n    const pomodoroCount = oldPomodoroCount + 1;\r\n\r\n    this.setState({\r\n      pomodoroCount,\r\n      pendingPomodoro: true\r\n    });\r\n    this.handleSetSession(Session.getBreakduration(pomodoroCount));\r\n  }\r\n\r\n  handleSessionEnd = () => {\r\n    const { currentSession } = this.state;\r\n\r\n    if (currentSession === Session.POMODORO) this.onPomodoroFinished();\r\n    else this.handleSetSession(Session.POMODORO);\r\n  };\r\n\r\n  handleSetSession = session => this.setState({ currentSession: session });\r\n\r\n  handleTimerStart = () => {\r\n    this.setState({\r\n      isWorking: this.state.currentSession === Session.POMODORO\r\n    });\r\n  };\r\n\r\n  handleTimerStop = () => this.setState({ isWorking: false });\r\n\r\n  handleTaskCountChange = (taskCount, pomodoroCount) =>\r\n    this.setState({ taskCount, pomodoroCount });\r\n\r\n  handlePomodoroAssigned = () => {\r\n    if (this.state.pendingPomodoro) this.setState({ pendingPomodoro: false });\r\n  };\r\n\r\n  handleInfoModalToggle = () =>\r\n    this.setState({ infoModalOpen: !this.state.infoModalOpen });\r\n\r\n  handleSettingsModalToggle = () =>\r\n    this.setState({ settingsModalOpen: !this.state.settingsModalOpen });\r\n\r\n  render() {\r\n    const {\r\n      pomodoroCount,\r\n      currentSession,\r\n      pendingPomodoro,\r\n      isWorking,\r\n      taskCount,\r\n      infoModalOpen,\r\n      settingsModalOpen,\r\n      timersInitialized\r\n    } = this.state;\r\n\r\n    const isSessionPomodoro = currentSession === Session.POMODORO;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <AppNavbar\r\n          title=\"Pomodori Story\"\r\n          isBreakTime={!isSessionPomodoro}\r\n          isWorking={isWorking}\r\n          onInfoClick={this.handleInfoModalToggle}\r\n          onSettingsClick={this.handleSettingsModalToggle}\r\n        />\r\n        <InfoModal\r\n          isOpen={infoModalOpen}\r\n          onToggle={this.handleInfoModalToggle}\r\n        />\r\n        <SettingsModal\r\n          isOpen={settingsModalOpen}\r\n          onToggle={this.handleSettingsModalToggle}\r\n        />\r\n        <Container>\r\n          <Row>\r\n            <LeftToBottomCol>\r\n              <Tasks\r\n                pendingPomodoro={pendingPomodoro}\r\n                onTasksChanged={this.handleTaskCountChange}\r\n                onPomodoroAssigned={this.handlePomodoroAssigned}\r\n                DEBUG_se_hack={this.handleSessionEnd}\r\n              />\r\n            </LeftToBottomCol>\r\n            <RightToTopCol>\r\n              <SessionButtons\r\n                currentSession={currentSession}\r\n                onButtonClick={this.handleSetSession}\r\n              />\r\n              <Timer\r\n                currentSessionValue={currentSession}\r\n                isPomodoro={isSessionPomodoro}\r\n                startOnChange={timersInitialized}\r\n                onTimerStart={this.handleTimerStart}\r\n                onTimerStop={this.handleTimerStop}\r\n                onTimerDone={this.handleSessionEnd}\r\n              />\r\n              <Summary taskCount={taskCount} pomodoroCount={pomodoroCount} />\r\n            </RightToTopCol>\r\n          </Row>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}